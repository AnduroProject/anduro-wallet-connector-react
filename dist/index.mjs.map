{"version":3,"sources":["../src/hooks/useConnector.tsx"],"names":["childWindow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\ninterface WalletState {\n    accountPublicKey: string; // wallet account public key\n    connectionState: string; // connection state\n};\ninterface NetworkState {\n    chainId: any; // Chain ID\n    networkType: string; // Chain type (bitcoin OR sidechain)\n};\n\ninterface connectParams {\n  chainId: number;\n  walletURL: string;\n};\ninterface createTransactionParams {\n    transactionType: string;\n    amount: number;\n    receiverAddress?: string | undefined;\n    feeRate?: number | undefined;\n};\ninterface PropertiesType {\n    type: string;\n    value: string;\n};\ninterface CreateassetParams {\n    name: string;\n    symbol: string;\n    imageUrl: string;\n    supply: number;\n    properties: PropertiesType[];\n    assetType: number;\n    transactionType: string;\n    receiverAddress?: string | undefined;\n    assetId?: number | undefined;\n}\ninterface TransferAssetParams {\n    assetId: number;\n    receiverAddress: string;\n    supply: number;\n}\nenum requestTypes {\n  connect = 'connect',\n  disconnected = 'disconnect',\n  connectionResponse = 'connection-response',\n  accountNotCreated = 'account-not-created',\n  walletLoaded = 'wallet-loaded',\n  networkinfo = 'networkinfo',\n  send = 'send',\n  createAsset = 'create-asset',\n  transferAsset = 'transfer-asset',\n  networkinfoResponse = 'networkinfo-response',\n  sendResponse = 'send-response',\n  createAssetResponse = 'create-asset-response',\n  disconnectResponse = 'disconnect-response',\n  bitcoin = 'bitcoin',\n  sidechain = 'sidechain',\n  normal = 'normal',\n  pegin = 'pegin',\n  pegout = 'pegout'\n};\n\ntype UseConnectorContextContextType = {\n  networkState: NetworkState;\n  walletState: WalletState;\n  connect: (params: connectParams) => any;\n  transferasset: (params: TransferAssetParams) => any;\n  createasset: (params: CreateassetParams) => any;\n  send: (params: createTransactionParams) => any;\n  disconnect: () => any;\n}\nexport const useConnector = React.createContext<UseConnectorContextContextType | null>(\n    null,\n)\nlet resolvePromise: any = null;\nexport const UseConnectorProvider = (props: any) => {\n    const [childWindow, setChildWindow] = useState<any>(null);\n    const [requestType, setRequestType] = useState(\"\");\n    const [transactionData, setTransactionData] = useState<createTransactionParams>({\n      transactionType: \"\",\n      amount: 0,\n      receiverAddress: \"\",\n      feeRate: 1,\n    });\n    const [requestData, setRequestData] = React.useState<any>(null);\n    const [createAssetData, setCreateAssetData] = React.useState<CreateassetParams>({\n      name: \"\",\n      symbol: \"\",\n      imageUrl: \"\",\n      supply: 0,\n      properties: [{type: \"\", value: \"\",}],\n      assetType: 0,\n      transactionType: \"\",\n      receiverAddress: \"\",\n    });\n    const [transferAssetData, setTransferAssetData] = React.useState<TransferAssetParams>({\n      assetId: 0,\n      receiverAddress: \"\",\n      supply: 0,\n    });\n    const [networkState, setNetworkState] = React.useState<NetworkState>({chainId: null, networkType: \"\"})\n    const [walletState, setWalletState] = React.useState<WalletState>({accountPublicKey: \"\", connectionState: \"disconnected\"})\n    const [walletURL, setWalletURL] = useState(localStorage.getItem(\"walletURL\") || props.walletURL);\n    const windowFeatures = \"left=1000,top=100,width=370,height=550,fullscreen=yes,toolbar=no,menubar=no,scrollbars=no,resizable=no,location=no,directories=no, status=no, titlebar=no\";\n\n    useEffect(() => {\n      console.log(\"networkState\", networkState)\n      if (networkState.chainId === null) {\n        console.log(\"NETWORK STATE CHECK\", networkState)\n        let walleturl = \"http://localhost:5002\"\n        const url = `${walleturl}?requestType=networkinfo`;\n        console.log(\"Wallet URL\", url)\n        let targetWindow: any = window.open(url,\"_blank\",windowFeatures);\n        setChildWindow(targetWindow)\n        setRequestType(\"networkinfo\")\n      }\n    }, [networkState]);\n    \n    useEffect(() => {\n      if (childWindow != null) {\n        window.addEventListener('message', handleMessage);\n        return () => {\n          window.removeEventListener('message', handleMessage);\n        };\n      }\n    }, [childWindow]);\n    // useEffect(() => {\n    //   const onUnload = (e: any) => {\n    //     e.preventDefault()\n    //     return (e.returnValue = \"Are you sure you want to close?\")\n    //   }\n    //   window.addEventListener(\"beforeunload\", onUnload)\n    //   return () => window.removeEventListener(\"beforeunload\", onUnload)\n    // }, [])\n  \n    const handleMessage = (event: any) => {\n      if (event.data.type === requestTypes.connectionResponse) {\n        if (event.data.status) {\n          childWindow.close();\n          updateNetworkInformation(event.data.result)\n          updateWalletInformation(\"connected\", event.data.result.accountPublicKey)          \n          resolvePromise({status: true, result: event.data})\n        } else {\n          resolvePromise({status: false, result: event.data})\n        }\n      } else if (event.data.type === requestTypes.accountNotCreated) {\n        console.log(\"Account Not Created\", event.data)\n        childWindow.close()\n        resolvePromise({status: false, result: event.data})\n      } else if (event.data.type === requestTypes.walletLoaded) {\n        if (event.data.status) {\n          if (requestType === requestTypes.connect || requestType === requestTypes.disconnected) {\n            sendMessageToChildWindow({requestType, siteurl: window.location.origin, chainId: requestData.chainId});\n          } else if (requestType === requestTypes.networkinfo) {\n            sendMessageToChildWindow({requestType: requestType, siteurl: window.location.origin})\n          } else if (requestType === requestTypes.send) {\n            sendMessageToChildWindow({requestType: requestType, transactionType: transactionData.transactionType, amount: transactionData.amount, receiverAddress: transactionData.receiverAddress, feerate: transactionData.feeRate, chainId: networkState.chainId })\n          } else if (requestType === requestTypes.createAsset) {\n            const formValues = {\n              headline: createAssetData.name,\n              imageUrl: createAssetData.imageUrl,\n              supply: createAssetData.supply,\n              imagebase64Data: {data: \"\", type: \"\"},\n              symbol: createAssetData.symbol,\n            }\n            sendMessageToChildWindow({requestType: requestType, transactionType: createAssetData.transactionType, formValues, assetType: createAssetData.assetType, properties: createAssetData.properties, chainId: networkState.chainId, supply: createAssetData.supply, receiverAddress: createAssetData.receiverAddress, assetId: createAssetData.assetId })\n          } else if (requestType === requestTypes.transferAsset) {\n            sendMessageToChildWindow({requestType: requestType, chainId: networkState.chainId, supply: transferAssetData.supply, receiverAddress: transferAssetData.receiverAddress, assetId: transferAssetData.assetId })\n          }\n        }\n      } else if (event.data.type === requestTypes.networkinfoResponse) {\n        console.log(\"Network Info Response\", event.data)\n        childWindow.close()\n        if (event.data.status) {\n            updateNetworkInformation(event.data.result)\n            updateWalletInformation(\"conneted\", event.data.result.accountPublicKey)\n        }\n      } else if (event.data.type === requestTypes.sendResponse || event.data.type === requestTypes.createAssetResponse) {\n        childWindow.close()\n        resolvePromise({status: true, result: event.data})\n      } else if (event.data.type === requestTypes.disconnectResponse) {\n        childWindow.close()\n        updateNetworkInformation({chainId: null, networkType: \"\",})\n        updateWalletInformation(\"disconnected\", \"\")\n      }\n    }\n    const sendMessageToChildWindow = (data: any) => {\n      childWindow.postMessage(data, \"*\");\n    }\n    const updateNetworkInformation = (params: any) => {\n      console.log(\"NETWORK PARAMS CHECK 1 \", params.chainId)\n      console.log(\"NETWORK PARAMS CHECK 2 \", params.networkType)\n        setNetworkState({\n            chainId: params.chainId,\n            networkType: params.networkType,\n        });\n    }\n    const updateWalletInformation = (connectionState: string, accountPublicKey: string) => {\n      console.log(\"WALLET PARAMS CHECK 1 \", connectionState)\n      console.log(\"WALLET PARAMS CHECK 2 \", accountPublicKey)\n      setWalletState({\n        accountPublicKey: accountPublicKey,\n        connectionState: connectionState,\n      })\n    }\n    const connect = async (params: connectParams) => {\n      return new Promise((resolve, reject) => {\n        const url = `${params.walletURL}?requestType=connect`;\n        let childWindow = window.open(url,\"_blank\",windowFeatures);\n        localStorage.setItem(\"walletURL\", params.walletURL)\n        setWalletURL(params.walletURL)\n        setRequestType(\"connect\")\n        setChildWindow(childWindow)\n        setRequestData({\n          chainId: params.chainId,\n        })\n        updateWalletInformation(\"connecting\", \"\")\n        resolvePromise = resolve;\n      })\n    }\n  \n    const disconnect = () => {\n      return new Promise((resolve, reject) => {\n        const url = `${walletURL}?requestType=disconnect`;\n        let childWindow = window.open(url,\"_blank\",windowFeatures);\n        setRequestType(\"disconnect\")\n        setChildWindow(childWindow)\n        updateWalletInformation(\"disconnecting\", \"\")\n        resolvePromise = resolve;\n      })\n    }\n    const send = (params: createTransactionParams) => {\n      return new Promise((resolve, reject) => {\n        if (checkWalletConnection(resolve, \"\")) {\n          const validateTransactionTypeResult = validateSendTransactionType(params.transactionType)\n          if (!validateTransactionTypeResult) {\n            resolve({\n              status: false,\n              error: \"can't process your request, Invalid transaction type\",\n              result: null,\n            })\n            return;\n          }\n          const url = `${walletURL}?requestType=send`;\n          let childWindow = window.open(url,\"_blank\",windowFeatures);\n          setRequestType(\"send\")\n          setChildWindow(childWindow)\n          setTransactionData(params)\n          resolvePromise = resolve;\n        }\n      })\n    }\n    const checkWalletConnection = (onError: any, transactionType: string) => {\n      let status: boolean = true;\n      let error: any = null;\n      if (networkState.chainId === null || networkState.networkType === \"\") {\n        status = false\n        error = \"The wallet is not connected.\"\n      } else if (transactionType && networkState.networkType === requestTypes.bitcoin) {\n        status = false\n        error = \"can't process your request, Invalid transaction type.\"\n      }\n      if (!status) {\n        onError({\n          status: status,\n          result: null,\n          error,\n        })\n      }\n      return status\n    }\n    const validateSendTransactionType = (transactionType: string) => {\n      let status: boolean = false\n      if (transactionType === requestTypes.normal) {\n        status = true\n      } else if (transactionType === requestTypes.pegin) {\n        status = networkState.networkType === requestTypes.bitcoin\n      } else if (transactionType === requestTypes.pegout) {\n        status = networkState.networkType === requestTypes.sidechain\n      }\n      return status\n    }\n    const createasset = (params: CreateassetParams) => {\n      return new Promise((resolve, reject) => {\n        if (checkWalletConnection(resolve, params.transactionType)) {\n          const url = `${walletURL}?requestType=create-asset`;\n          let childWindow = window.open(url,\"_blank\",windowFeatures);\n          setRequestType(\"create-asset\")\n          setChildWindow(childWindow)\n          setCreateAssetData(params)\n          resolvePromise = resolve;\n        }\n      })\n    }\n    const transferasset = (params: TransferAssetParams) => {\n      return new Promise((resolve, reject) => {\n        if (checkWalletConnection(resolve, \"transfer\")) {\n          const url = `${walletURL}?requestType=transfer-asset`;\n          let childWindow = window.open(url,\"_blank\",windowFeatures);\n          setRequestType(\"transfer-asset\")\n          setChildWindow(childWindow)\n          setTransferAssetData(params)\n          resolvePromise = resolve;\n        }\n      })\n    }\n\n  const { children } = props\n  return (\n    <useConnector.Provider\n      value={{\n        walletState,\n        networkState,\n        connect,\n        disconnect,\n        send,\n        createasset,\n        transferasset,\n      }}\n    >\n      {children}\n    </useConnector.Provider>\n  )\n}\n"]}