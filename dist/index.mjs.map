{"version":3,"sources":["../src/hooks/useConnector.tsx","../src/helpers/errorMessages.tsx","../src/helpers/handleResponse.tsx","../src/helpers/handleWalletWindow.tsx"],"names":["childWindow"],"mappings":"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","sourcesContent":["/*\nProject : Anduro Wallet Connector\nFileName : useConnector.tsx\nAuthor : \nFile Created : 04/03/2024\nCopyRights : \nPurpose : This is the file that is used to handle connect , disconnect and manage anduro wallet.\n*/\nimport React, { useState, useEffect } from \"react\"\nimport { ERROR_MESSAGES } from \"../helpers/errorMessages\"\nimport { handleErrorResponse, handleSuccessResponse } from \"../helpers/handleResponse\"\nimport { openWalletWindow } from \"../helpers/handleWalletWindow\"\n\ninterface WalletState {\n  accountPublicKey: string\n  connectionState: string\n}\ninterface NetworkState {\n  chainId: any\n  networkType: string\n}\ninterface connectParams {\n  chainId: number\n}\ninterface SignParams {\n  message?: string\n}\ninterface createTransactionParams {\n  transactionType?: string\n  amount?: number\n  receiverAddress?: string | undefined\n  feeRate?: number | undefined\n}\ninterface PropertiesType {\n  type: string\n  value: string\n}\ninterface CreateassetParams {\n  name?: string\n  symbol?: string\n  imageUrl?: string\n  supply?: number\n  properties?: PropertiesType[]\n  assetType?: number\n  transactionType?: string\n  receiverAddress?: string | undefined\n  assetId?: number | undefined\n}\ninterface TransferAssetParams {\n  assetId?: number\n  receiverAddress?: string\n  supply?: number\n}\nenum RequestTypes {\n  connect = \"connect\",\n  disconnected = \"disconnect\",\n  accountNotCreated = \"account-not-created\",\n  walletLoaded = \"wallet-loaded\",\n  networkinfo = \"networkinfo\",\n  send = \"send\",\n  createAsset = \"create-asset\",\n  transferAsset = \"transfer-asset\",\n  sign = \"sign\",\n}\n\nenum ResponseTypes {\n  connectionResponse = \"connection-response\",\n  networkinfoResponse = \"networkinfo-response\",\n  sendResponse = \"send-response\",\n  createAssetResponse = \"create-asset-response\",\n  disconnectResponse = \"disconnect-response\",\n}\n\nenum TransactionTypes {\n  bitcoin = \"bitcoin\",\n  sidechain = \"sidechain\",\n  normal = \"normal\",\n  pegin = \"pegin\",\n  pegout = \"pegout\",\n}\n\ntype UseConnectorContextContextType = {\n  networkState: NetworkState\n  walletState: WalletState\n  connect: (params: connectParams) => object\n  networkInfo: () => object\n  sign: (params: SignParams) => object\n  transferasset: (params: TransferAssetParams) => object\n  createasset: (params: CreateassetParams) => object\n  send: (params: createTransactionParams) => object\n  disconnect: () => object\n}\nexport const useConnector = React.createContext<UseConnectorContextContextType | null>(null)\nlet resolvePromise: any = null\nexport const UseConnectorProvider = (props: any) => {\n  const [childWindow, setChildWindow] = useState<any>(null)\n  const [requestType, setRequestType] = useState<RequestTypes>()\n  const [transactionData, setTransactionData] = useState<createTransactionParams>({})\n  const [signData, setSignData] = useState<SignParams>({})\n  const [requestData, setRequestData] = React.useState<any>(null)\n  const [createAssetData, setCreateAssetData] = React.useState<CreateassetParams>({})\n  const [transferAssetData, setTransferAssetData] = React.useState<TransferAssetParams>({})\n  const [networkState, setNetworkState] = React.useState<NetworkState>({\n    chainId: null,\n    networkType: \"\",\n  })\n  const [walletState, setWalletState] = React.useState<WalletState>({\n    accountPublicKey: \"\",\n    connectionState: \"disconnected\",\n  })\n  const [walletURL, setWalletURL] = useState(props.walletURL)\n\n  useEffect(() => {\n    if (childWindow != null) {\n      window.addEventListener(\"message\", handleMessage)\n      return () => {\n        window.removeEventListener(\"message\", handleMessage)\n      }\n    }\n  }, [childWindow])\n\n  /**\n   * The following function used for listening messages from anduro wallet extension\n   *\n   * @param event Event message\n   *\n   */\n  const handleMessage = (event: any) => {\n    if (!event.data.type) return false\n\n    if (event.data.type == \"webpackOk\") return false\n\n    if (event.data.type === RequestTypes.walletLoaded) return handlewalletLoadedMessage()\n\n    if (childWindow) childWindow.close()\n\n    if (!event.data.status) {\n      if (resolvePromise) {\n        return resolvePromise(handleErrorResponse(event.data.error ? event.data.error : event.data))\n      } else {\n        return handleErrorResponse(event.data.error ? event.data.error : event.data)\n      }\n    }\n\n    switch (event.data.type) {\n      case ResponseTypes.connectionResponse:\n        updateNetworkInformation(event.data.result)\n        updateWalletInformation(\"connected\", event.data.result.accountPublicKey)\n        resolvePromise(handleSuccessResponse(event.data))\n        break\n      case RequestTypes.accountNotCreated:\n        if (resolvePromise) resolvePromise(handleErrorResponse(event.data))\n        break\n      case ResponseTypes.networkinfoResponse:\n        updateNetworkInformation(event.data.result)\n        updateWalletInformation(\"conneted\", event.data.result.accountPublicKey)\n        break\n      case ResponseTypes.disconnectResponse:\n        updateNetworkInformation({ chainId: null, networkType: \"\" })\n        updateWalletInformation(\"disconnected\", \"\")\n        if (resolvePromise) resolvePromise(handleSuccessResponse(event.data))\n        break\n      default:\n        if (resolvePromise) resolvePromise(handleSuccessResponse(event.data))\n        break\n    }\n  }\n  /**\n   * The following function used for listening messages from wallet and once wallet loaded, send message to child window\n   */\n  const handlewalletLoadedMessage = () => {\n    if (requestType === RequestTypes.connect || requestType === RequestTypes.disconnected) {\n      sendMessageToChildWindow({\n        requestType,\n        siteurl: window.location.origin,\n        chainId: requestData ? requestData.chainId : 0,\n      })\n    } else if (requestType === RequestTypes.networkinfo) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        siteurl: window.location.origin,\n      })\n    } else if (requestType === RequestTypes.send) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        transactionType: transactionData.transactionType,\n        amount: transactionData.amount,\n        receiverAddress: transactionData.receiverAddress,\n        feerate: transactionData.feeRate,\n        chainId: networkState.chainId,\n      })\n    } else if (requestType === RequestTypes.createAsset) {\n      const formValues = {\n        headline: createAssetData.name,\n        imageUrl: createAssetData.imageUrl,\n        supply: createAssetData.supply,\n        imagebase64Data: { data: \"\", type: \"\" },\n        symbol: createAssetData.symbol,\n      }\n      sendMessageToChildWindow({\n        requestType: requestType,\n        transactionType: createAssetData.transactionType,\n        formValues,\n        assetType: createAssetData.assetType,\n        properties: createAssetData.properties,\n        chainId: networkState.chainId,\n        supply: createAssetData.supply,\n        receiverAddress: createAssetData.receiverAddress,\n        assetId: createAssetData.assetId,\n      })\n    } else if (requestType === RequestTypes.transferAsset) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        chainId: networkState.chainId,\n        supply: transferAssetData.supply,\n        receiverAddress: transferAssetData.receiverAddress,\n        assetId: transferAssetData.assetId,\n      })\n    } else if (requestType === RequestTypes.sign) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        chainId: networkState.chainId,\n        message: signData.message,\n      })\n    }\n  }\n  /**\n   * The following function used for sending messages to anduro wallet extension\n   *\n   * @param data Data to send to the wallet\n   *\n   */\n  const sendMessageToChildWindow = (data: any) => {\n    childWindow.postMessage(data, \"*\")\n  }\n\n  /**\n   * The following function used for setting network information in library\n   *\n   * @param params Event message\n   *\n   */\n  const updateNetworkInformation = (params: any) => {\n    setNetworkState({\n      chainId: params.chainId,\n      networkType: params.networkType,\n    })\n  }\n\n  /**\n   * The following function used for setting wallet account public key , connection state information in library\n   *\n   * @param connectionState The connection state of the Anduro wallet\n   * @param accountPublicKey The Anduro wallet account public key\n   *\n   */\n  const updateWalletInformation = (connectionState: string, accountPublicKey: string) => {\n    setWalletState({\n      accountPublicKey: accountPublicKey,\n      connectionState: connectionState,\n    })\n  }\n\n  /**\n   * The following function used for connecting anduro wallet extension\n   *\n   * @param chainId Chain ID for connecting the Anduro wallet\n   *\n   */\n  const connect = async (params: connectParams) => {\n    return new Promise((resolve) => {\n      const url = `${walletURL}?requestType=${RequestTypes.connect}`\n      let childWindow = openWalletWindow(url)\n      setWalletURL(walletURL)\n      setRequestType(RequestTypes.connect)\n      setChildWindow(childWindow)\n      setRequestData({\n        chainId: params.chainId,\n      })\n      updateWalletInformation(\"connecting\", \"\")\n      resolvePromise = resolve\n    })\n  }\n\n  /**\n   * The following function used for initialize wallet and get network info\n   */\n  const networkInfo = async () => {\n    return new Promise((resolve) => {\n      const url = `${walletURL}?requestType=${RequestTypes.networkinfo}`\n      let childWindow = openWalletWindow(url)\n      setRequestType(RequestTypes.networkinfo)\n      setChildWindow(childWindow)\n      resolvePromise = resolve\n    })\n  }\n  /**\n   * The following function used for disconnecting anduro wallet extension\n   */\n  const disconnect = () => {\n    return new Promise((resolve) => {\n      const url = `${walletURL}?requestType=${RequestTypes.disconnected}`\n      let childWindow = openWalletWindow(url)\n      setRequestType(RequestTypes.disconnected)\n      setChildWindow(childWindow)\n      updateWalletInformation(\"disconnecting\", \"\")\n      resolvePromise = resolve\n    })\n  }\n\n  /**\n   * The following function used for send BTC / CBTC to receiver and\n   * convert BTC to CBTC / CBTC to BTC in anduro wallet\n   *\n   * @param transactionType transactionType:\n   *                          1. normal - Send BTC / CBTC OR CBTC / BTC\n   *                          2. pegin - Convert BTC to CBTC\n   *                          3. pegout - Convert CBTC to BTC\n   * @param amount transaction amount\n   * @param receiverAddress (Optional) Receiver address ( coordinate address / bitcoin address )\n   * @param feeRate (Optional) Fee rate per virtual byte\n   *\n   */\n  const send = (params: createTransactionParams) => {\n    if (!params.transactionType) return handleErrorResponse(ERROR_MESSAGES.transactionTypeRequired)\n\n    if (!params.amount) return handleErrorResponse(ERROR_MESSAGES.amountRequired)\n\n    if (!validateSendTransactionType(params.transactionType))\n      return handleErrorResponse(ERROR_MESSAGES.transactionTypeInvalid)\n\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\") && params.transactionType) {\n        const url = `${walletURL}?requestType=${RequestTypes.send}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.send)\n        setChildWindow(childWindow)\n        setTransactionData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for checking anduro wallet is in connected state or not\n   *\n   * @param onError\n   * @param transactionType\n   *\n   */\n  const checkWalletConnection = (resolve: any, transactionType: string) => {\n    let status: boolean = true\n    let error: any = null\n    if (networkState.chainId === null || networkState.networkType === \"\") {\n      status = false\n      error = ERROR_MESSAGES.walletNotConnected\n    } else if (transactionType && networkState.networkType === TransactionTypes.bitcoin) {\n      status = false\n      error = ERROR_MESSAGES.transactionTypeInvalid\n    }\n    if (!status) {\n      resolve({\n        status: status,\n        result: null,\n        error,\n      })\n    }\n    return status\n  }\n\n  /**\n   * The following function is used to validate transaction types\n   *\n   * @param transactionType\n   *\n   */\n  const validateSendTransactionType = (transactionType: string) => {\n    let status: boolean = false\n    if (transactionType === TransactionTypes.normal) {\n      status = true\n    } else if (transactionType === TransactionTypes.pegin) {\n      status = networkState.networkType === TransactionTypes.bitcoin\n    } else if (transactionType === TransactionTypes.pegout) {\n      status = networkState.networkType === TransactionTypes.sidechain\n    }\n    return status\n  }\n\n  /**\n   * The following function used for creating asset in anduro wallet\n   *\n   * @param name The asset's name\n   * @param symbol The asset's symbol\n   * @param imageUrl The asset's image URL\n   * @param supply The asset's total supply\n   * @param properties The asset's trait data\n   * @param assetType assetType :\n   *                    1. 0 for creating tokens.\n   *                    2. 1 for creating NFT.\n   * @param transactionType transactionType: create OR mint\n   * @param receiverAddress (Optional) Required for mint transactions\n   * @param assetId (Optional) Required for mint transactions\n   *\n   */\n  const createasset = (params: CreateassetParams) => {\n    if (!params.transactionType) return handleErrorResponse(ERROR_MESSAGES.transactionTypeRequired)\n\n    if (!params.name) return handleErrorResponse(ERROR_MESSAGES.nameRequired)\n\n    if (!params.symbol) return handleErrorResponse(ERROR_MESSAGES.symbolRequired)\n\n    if (!params.imageUrl) return handleErrorResponse(ERROR_MESSAGES.imageUrlRequired)\n\n    if (!params.supply) return handleErrorResponse(ERROR_MESSAGES.supplyRequired)\n\n    if (params.assetType === undefined || params.assetType === null)\n      return handleErrorResponse(ERROR_MESSAGES.assetTypeRequired)\n\n    return new Promise((resolve) => {\n      if (params.transactionType && checkWalletConnection(resolve, params.transactionType)) {\n        const url = `${walletURL}?requestType=${RequestTypes.createAsset}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.createAsset)\n        setChildWindow(childWindow)\n        setCreateAssetData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for transfer asset / mint  in anduro wallet\n   *\n   * @param assetId The asset ID\n   * @param receiverAddress Receiver Address\n   * @param supply supply to transfer\n   *\n   */\n  const transferasset = (params: TransferAssetParams) => {\n    if (!params.assetId) return handleErrorResponse(ERROR_MESSAGES.assetIdRequired)\n\n    if (!params.receiverAddress) return handleErrorResponse(ERROR_MESSAGES.receiverAddressRequired)\n\n    if (!params.supply) return handleErrorResponse(ERROR_MESSAGES.supplyRequired)\n\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"transfer\")) {\n        const url = `${walletURL}?requestType=${RequestTypes.transferAsset}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.transferAsset)\n        setChildWindow(childWindow)\n        setTransferAssetData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for sign process\n   *\n   * @param message The sign message\n   *\n   */\n  const sign = (params: SignParams) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${walletURL}?requestType=${RequestTypes.sign}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.sign)\n        setChildWindow(childWindow)\n        setSignData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  const { children } = props\n  return (\n    <useConnector.Provider\n      value={{\n        walletState,\n        networkState,\n        connect,\n        networkInfo,\n        disconnect,\n        send,\n        createasset,\n        transferasset,\n        sign,\n      }}\n    >\n      {children}\n    </useConnector.Provider>\n  )\n}\n","/*\nProject : Anduro Wallet Connector\nFileName : handleResponse.tsx\nAuthor : \nFile Created : 13/04/2024\nCopyRights : \nPurpose : This is the file that is used to store error message verbiage\n*/\n\nconst FAIL_PROCESS = \"Can't process your request\"\nexport const ERROR_MESSAGES = {\n  walletNotConnected: \"The wallet is not connected.\",\n  transactionTypeRequired: `${FAIL_PROCESS}, Transaction Type is required`,\n  transactionTypeInvalid: `${FAIL_PROCESS}, Invalid transaction type`,\n  amountRequired: `${FAIL_PROCESS}, Amount is required`,\n  nameRequired: `${FAIL_PROCESS}, Name is required`,\n  symbolRequired: `${FAIL_PROCESS}, Symbol is required`,\n  imageUrlRequired: `${FAIL_PROCESS}, Image Url is required`,\n  supplyRequired: `${FAIL_PROCESS}, Supply is required`,\n  assetTypeRequired: `${FAIL_PROCESS}, Asset Type is required`,\n  assetTypeInvalid: `${FAIL_PROCESS}, Invalid Asset Type`,\n  assetIdRequired: `${FAIL_PROCESS}, Asset Id is required`,\n  receiverAddressRequired: `${FAIL_PROCESS}, Receiver Address is required`,\n}\n","/*\nProject : Anduro Wallet Connector\nFileName : handleResponse.tsx\nAuthor : \nFile Created : 13/04/2024\nCopyRights : \nPurpose : This is the file that is used to handle response structure.\n*/\n\n/**\n * The following function used to handle error response structure\n * @param error\n */\nexport const handleErrorResponse = (error: any = null) => {\n  return { status: false, result: null, error }\n}\n/**\n * The following function used to handle success response structure\n * @param result\n */\nexport const handleSuccessResponse = (result: any = null) => {\n  return { status: true, result: result.result ? result.result : result, error: null }\n}\n","/*\nProject : Anduro Wallet Connector\nFileName : handleWalletWindow.tsx\nAuthor : \nFile Created : 13/04/2024\nCopyRights : \nPurpose : This is the file that is used to handle wallet window.\n*/\n/**\n * The following function used to handle wallet window opening part\n * @param url The URL of the page to open.\n * @returns A reference to the opened window\n */\nexport const openWalletWindow = (url: any) => {\n  var inputWidth = 370\n  var inputHeight = 550\n  const viewportwidth = document.documentElement.clientWidth\n  const tempW: any = window.top?.outerWidth\n  const tempH: any = window.top?.outerHeight\n  const tempSY: any = window.top?.screenY\n  const tempSX: any = window.top?.screenX\n  var y = tempH / 2 + tempSY - inputHeight / 2\n  var x = tempW / 2 + tempSX - inputWidth / 2\n  if (viewportwidth > 800) {\n    x = viewportwidth - 300\n    y = 0\n  }\n  return window.open(\n    url,\n    \"_blank\",\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${inputWidth}, height=${inputHeight}, right=0, top=${y}, left=${x}`,\n  )\n}\n"]}