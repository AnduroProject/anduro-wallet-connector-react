{"version":3,"sources":["../src/index.ts","../src/hooks/useConnector.tsx"],"names":["React","childWindow"],"mappings":"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","sourcesContent":["/*\nProject : Anduro Wallet Connector\nFileName : index.tsx\nAuthor : \nFile Created : 04/03/2024\nCopyRights : \nPurpose : This is the file that is used to export wallet connector provider .\n*/\n\nexport { useConnector, UseConnectorProvider } from \"./hooks/useConnector\"\n","/* eslint-disable no-redeclare */\n/* eslint-disable no-unused-vars */\n/*\nProject : Anduro Wallet Connector\nFileName : useConnector.tsx\nAuthor :\nFile Created : 04/03/2024\nCopyRights :\nPurpose : This is the file that is used to handle connect , disconnect and manage anduro wallet.\n*/\n\nimport React, { useState, useEffect } from \"react\"\n\ninterface WalletState {\n  accountPublicKey: string\n  connectionState: string\n}\ninterface NetworkState {\n  chainId: any\n  networkType: string\n}\ninterface connectParams {\n  chainId: number\n}\ninterface createTransactionParams {\n  transactionType: string\n  amount: number\n  receiverAddress?: string | undefined\n  feeRate?: number | undefined\n}\ninterface PropertiesType {\n  type: string\n  value: string\n}\ninterface CreateassetParams {\n  name: string\n  symbol: string\n  imageUrl: string\n  supply: number\n  properties: PropertiesType[]\n  assetType: number\n  transactionType: string\n  receiverAddress?: string | undefined\n  assetId?: number | undefined\n}\ninterface TransferAssetParams {\n  assetId: number\n  receiverAddress: string\n  supply: number\n}\n// eslint-disable-next-line no-unused-vars\nenum RequestTypes {\n  connect = \"connect\",\n  disconnected = \"disconnect\",\n  accountNotCreated = \"account-not-created\",\n  walletLoaded = \"wallet-loaded\",\n  networkinfo = \"networkinfo\",\n  send = \"send\",\n  createAsset = \"create-asset\",\n  transferAsset = \"transfer-asset\",\n}\n\nenum ResponseTypes {\n  connectionResponse = \"connection-response\",\n  networkinfoResponse = \"networkinfo-response\",\n  sendResponse = \"send-response\",\n  createAssetResponse = \"create-asset-response\",\n  disconnectResponse = \"disconnect-response\",\n}\n\nenum TransactionTypes {\n  bitcoin = \"bitcoin\",\n  sidechain = \"sidechain\",\n  normal = \"normal\",\n  pegin = \"pegin\",\n  pegout = \"pegout\",\n}\n\ntype UseConnectorContextContextType = {\n  networkState: NetworkState\n  walletState: WalletState\n  connect: (params: connectParams) => any\n  transferasset: (params: TransferAssetParams) => any\n  createasset: (params: CreateassetParams) => any\n  send: (params: createTransactionParams) => any\n  disconnect: () => any\n}\nexport const useConnector = React.createContext<UseConnectorContextContextType | null>(null)\nlet resolvePromise: any = null\nexport const UseConnectorProvider = (props: any) => {\n  const [childWindow, setChildWindow] = useState<any>(null)\n  const [currentRequestType, setCurrentRequestType] = useState<String>(RequestTypes.connect)\n  const [transactionData, setTransactionData] = useState<createTransactionParams>({\n    transactionType: \"\",\n    amount: 0,\n    receiverAddress: \"\",\n    feeRate: 1,\n  })\n  const [requestData, setRequestData] = React.useState<any>(null)\n  const [createAssetData, setCreateAssetData] = React.useState<CreateassetParams>({\n    name: \"\",\n    symbol: \"\",\n    imageUrl: \"\",\n    supply: 0,\n    properties: [{ type: \"\", value: \"\" }],\n    assetType: 0,\n    transactionType: \"\",\n    receiverAddress: \"\",\n  })\n  const [transferAssetData, setTransferAssetData] = React.useState<TransferAssetParams>({\n    assetId: 0,\n    receiverAddress: \"\",\n    supply: 0,\n  })\n  const [networkState, setNetworkState] = React.useState<NetworkState>({\n    chainId: null,\n    networkType: \"\",\n  })\n  const [walletState, setWalletState] = React.useState<WalletState>({\n    accountPublicKey: \"\",\n    connectionState: \"disconnected\",\n  })\n  const [walletURL, setWalletURL] = useState(localStorage.getItem(\"walletURL\") || props.walletURL)\n\n  useEffect(() => {\n    if (networkState.chainId === null && currentRequestType !== \"disconnect\") {\n      const url = `${walletURL}?requestType=networkinfo`\n      let targetWindow: any = openWalletWindow(url)\n      setChildWindow(targetWindow)\n      setCurrentRequestType(RequestTypes.networkinfo)\n    }\n  }, [networkState])\n\n  useEffect(() => {\n    if (childWindow != null) {\n      window.addEventListener(\"message\", handleMessage)\n      return () => {\n        window.removeEventListener(\"message\", handleMessage)\n      }\n    }\n  }, [childWindow])\n  useEffect(() => {\n    if (\n      (localStorage.getItem(\"walletURL\") &&\n        localStorage.getItem(\"walletURL\") !== props.walletURL) ||\n      (localStorage.getItem(\"walletURL\") === null && props.walletURL)\n    ) {\n      localStorage.setItem(\"walletURL\", props.walletURL)\n    }\n  }, [])\n\n  /**\n   * The following function used to handle wallet window opening part\n   * @param url The URL of the page to open.\n   * @returns A reference to the opened window\n   */\n  const openWalletWindow = (url: any) => {\n    var inputWidth = 370\n    var inputHeight = 550\n    const viewportwidth = document.documentElement.clientWidth\n    const tempW: any = window.top?.outerWidth\n    const tempH: any = window.top?.outerHeight\n    const tempSY: any = window.top?.screenY\n    const tempSX: any = window.top?.screenX\n    var y = tempH / 2 + tempSY - inputHeight / 2\n    var x = tempW / 2 + tempSX - inputWidth / 2\n    if (viewportwidth > 800) {\n      x = viewportwidth - 300\n      y = 0\n    }\n    return window.open(\n      url,\n      \"_blank\",\n      `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${inputWidth}, height=${inputHeight}, right=0, top=${y}, left=${x}`,\n    )\n  }\n\n  /**\n   * The following function used hanlde response structure\n   * @param status\n   * @param result\n   * @param error\n   * @returns\n   */\n  const handleResponse = (status: Boolean, result: any, error: any = null) => {\n    return { status, result, error }\n  }\n\n  /**\n   * The following function used for listening messages from anduro wallet extension\n   *\n   * @param event Event message\n   *\n   */\n  const handleMessage = (event: any) => {\n    if (event.data.type === ResponseTypes.connectionResponse) {\n      if (event.data.status) {\n        childWindow.close()\n        updateNetworkInformation(event.data.result)\n        updateWalletInformation(\"connected\", event.data.result.accountPublicKey)\n        resolvePromise(handleResponse(true, event.data))\n      } else {\n        resolvePromise(handleResponse(false, null, event.data))\n      }\n    } else if (event.data.type === RequestTypes.accountNotCreated) {\n      childWindow.close()\n      if (resolvePromise) {\n        resolvePromise(handleResponse(false, null, event.data))\n      }\n    } else if (event.data.type === RequestTypes.walletLoaded) {\n      if (event.data.status) {\n        if (\n          currentRequestType === RequestTypes.connect ||\n          currentRequestType === RequestTypes.disconnected\n        ) {\n          sendMessageToChildWindow({\n            requestType: currentRequestType,\n            siteurl: window.location.origin,\n            chainId: requestData ? requestData.chainId : 0,\n          })\n        } else if (currentRequestType === RequestTypes.networkinfo) {\n          sendMessageToChildWindow({\n            requestType: currentRequestType,\n            siteurl: window.location.origin,\n          })\n        } else if (currentRequestType === RequestTypes.send) {\n          sendMessageToChildWindow({\n            requestType: currentRequestType,\n            transactionType: transactionData.transactionType,\n            amount: transactionData.amount,\n            receiverAddress: transactionData.receiverAddress,\n            feerate: transactionData.feeRate,\n            chainId: networkState.chainId,\n          })\n        } else if (currentRequestType === RequestTypes.createAsset) {\n          const formValues = {\n            headline: createAssetData.name,\n            imageUrl: createAssetData.imageUrl,\n            supply: createAssetData.supply,\n            imagebase64Data: { data: \"\", type: \"\" },\n            symbol: createAssetData.symbol,\n          }\n          sendMessageToChildWindow({\n            requestType: currentRequestType,\n            transactionType: createAssetData.transactionType,\n            formValues,\n            assetType: createAssetData.assetType,\n            properties: createAssetData.properties,\n            chainId: networkState.chainId,\n            supply: createAssetData.supply,\n            receiverAddress: createAssetData.receiverAddress,\n            assetId: createAssetData.assetId,\n          })\n        } else if (currentRequestType === RequestTypes.transferAsset) {\n          sendMessageToChildWindow({\n            requestType: currentRequestType,\n            chainId: networkState.chainId,\n            supply: transferAssetData.supply,\n            receiverAddress: transferAssetData.receiverAddress,\n            assetId: transferAssetData.assetId,\n          })\n        }\n      }\n    } else if (event.data.type === ResponseTypes.networkinfoResponse) {\n      childWindow.close()\n      if (event.data.status) {\n        updateNetworkInformation(event.data.result)\n        updateWalletInformation(\"conneted\", event.data.result.accountPublicKey)\n      }\n    } else if (\n      event.data.type === ResponseTypes.sendResponse ||\n      event.data.type === ResponseTypes.createAssetResponse\n    ) {\n      childWindow.close()\n      resolvePromise(\n        handleResponse(\n          event.data.status,\n          event.data.status ? event.data : null,\n          event.data.status ? null : event.data,\n        ),\n      )\n    } else if (event.data.type === ResponseTypes.disconnectResponse) {\n      childWindow.close()\n      updateNetworkInformation({ chainId: null, networkType: \"\" })\n      updateWalletInformation(\"disconnected\", \"\")\n    }\n  }\n\n  /**\n   * The following function used for sending messages to anduro wallet extension\n   *\n   * @param data Data to send to the wallet\n   *\n   */\n  const sendMessageToChildWindow = (data: any) => {\n    childWindow.postMessage(data, \"*\")\n  }\n\n  /**\n   * The following function used for setting network information in library\n   *\n   * @param params Event message\n   *\n   */\n  const updateNetworkInformation = (params: any) => {\n    setNetworkState({\n      chainId: params.chainId,\n      networkType: params.networkType,\n    })\n  }\n\n  /**\n   * The following function used for setting wallet account public key , connection state information in library\n   *\n   * @param connectionState The connection state of the Anduro wallet\n   * @param accountPublicKey The Anduro wallet account public key\n   *\n   */\n  const updateWalletInformation = (connectionState: string, accountPublicKey: string) => {\n    setWalletState({\n      accountPublicKey: accountPublicKey,\n      connectionState: connectionState,\n    })\n  }\n\n  /**\n   * The following function used for connecting anduro wallet extension\n   *\n   * @param chainId Chain ID for connecting the Anduro wallet\n   *\n   */\n  const connect = async (params: connectParams) => {\n    return new Promise((resolve, reject) => {\n      const url = `${walletURL}?requestType=connect`\n      let childWindow = openWalletWindow(url)\n      setWalletURL(walletURL)\n      setCurrentRequestType(RequestTypes.connect)\n      setChildWindow(childWindow)\n      setRequestData({\n        chainId: params.chainId,\n      })\n      updateWalletInformation(\"connecting\", \"\")\n      resolvePromise = resolve\n    })\n  }\n\n  /**\n   * The following function used for disconnecting anduro wallet extension\n   */\n  const disconnect = () => {\n    return new Promise((resolve, reject) => {\n      const url = `${walletURL}?requestType=disconnect`\n      let childWindow = openWalletWindow(url)\n      setCurrentRequestType(RequestTypes.disconnected)\n      setChildWindow(childWindow)\n      updateWalletInformation(\"disconnecting\", \"\")\n      resolvePromise = resolve\n    })\n  }\n\n  /**\n   * The following function used for send BTC / CBTC to receiver and\n   * convert BTC to CBTC / CBTC to BTC in anduro wallet\n   *\n   * @param transactionType transactionType:\n   *                          1. normal - Send BTC / CBTC OR CBTC / BTC\n   *                          2. pegin - Convert BTC to CBTC\n   *                          3. pegout - Convert CBTC to BTC\n   * @param amount transaction amount\n   * @param receiverAddress (Optional) Receiver address ( coordinate address / bitcoin address )\n   * @param feeRate (Optional) Fee rate per virtual byte\n   *\n   */\n  const send = (params: createTransactionParams) => {\n    return new Promise((resolve, reject) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const validateTransactionTypeResult = validateSendTransactionType(params.transactionType)\n        if (!validateTransactionTypeResult) {\n          resolve({\n            status: false,\n            error: \"can't process your request, Invalid transaction type\",\n            result: null,\n          })\n          return\n        }\n        const url = `${walletURL}?requestType=send`\n        let childWindow = openWalletWindow(url)\n        setCurrentRequestType(RequestTypes.send)\n        setChildWindow(childWindow)\n        setTransactionData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for checking anduro wallet is in connected state or not\n   *\n   * @param onError\n   * @param transactionType\n   *\n   */\n  const checkWalletConnection = (resolve: any, transactionType: string) => {\n    let status: boolean = true\n    let error: any = null\n    if (networkState.chainId === null || networkState.networkType === \"\") {\n      status = false\n      error = \"The wallet is not connected.\"\n    } else if (transactionType && networkState.networkType === TransactionTypes.bitcoin) {\n      status = false\n      error = \"can't process your request, Invalid transaction type.\"\n    }\n    if (!status) {\n      resolve({\n        status: status,\n        result: null,\n        error,\n      })\n    }\n    return status\n  }\n\n  /**\n   * The following function is used to validate transaction types\n   *\n   * @param transactionType\n   *\n   */\n  const validateSendTransactionType = (transactionType: string) => {\n    let status: boolean = false\n    if (transactionType === TransactionTypes.normal) {\n      status = true\n    } else if (transactionType === TransactionTypes.pegin) {\n      status = networkState.networkType === TransactionTypes.bitcoin\n    } else if (transactionType === TransactionTypes.pegout) {\n      status = networkState.networkType === TransactionTypes.sidechain\n    }\n    return status\n  }\n\n  /**\n   * The following function used for creating asset in anduro wallet\n   *\n   * @param name The asset's name\n   * @param symbol The asset's symbol\n   * @param imageUrl The asset's image URL\n   * @param supply The asset's total supply\n   * @param properties The asset's trait data\n   * @param assetType assetType :\n   *                    1. 0 for creating tokens.\n   *                    2. 1 for creating NFT.\n   * @param transactionType transactionType: create OR mint\n   * @param receiverAddress (Optional) Required for mint transactions\n   * @param assetId (Optional) Required for mint transactions\n   *\n   */\n  const createasset = (params: CreateassetParams) => {\n    return new Promise((resolve, reject) => {\n      if (checkWalletConnection(resolve, params.transactionType)) {\n        const url = `${walletURL}?requestType=create-asset`\n        let childWindow = openWalletWindow(url)\n        setCurrentRequestType(RequestTypes.createAsset)\n        setChildWindow(childWindow)\n        setCreateAssetData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for transfer asset / mint  in anduro wallet\n   *\n   * @param assetId The asset ID\n   * @param receiverAddress Receiver Address\n   * @param supply supply to transfer\n   *\n   */\n  const transferasset = (params: TransferAssetParams) => {\n    return new Promise((resolve, reject) => {\n      if (checkWalletConnection(resolve, \"transfer\")) {\n        const url = `${walletURL}?requestType=transfer-asset`\n        let childWindow = openWalletWindow(url)\n        setCurrentRequestType(RequestTypes.transferAsset)\n        setChildWindow(childWindow)\n        setTransferAssetData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  const { children } = props\n  return (\n    <useConnector.Provider\n      value={{\n        walletState,\n        networkState,\n        connect,\n        disconnect,\n        send,\n        createasset,\n        transferasset,\n      }}\n    >\n      {children}\n    </useConnector.Provider>\n  )\n}\n"]}