{"version":3,"sources":["/home/bsetec/aashik/pre-conf-transaction/v2/v2-dev/injector/anduro-wallet-connector-react/dist/index.mjs","../src/hooks/useConnector.tsx","../src/helpers/errorMessages.tsx","../src/helpers/handleResponse.tsx","../src/helpers/handleWalletWindow.tsx","../src/config/walletApi.ts"],"names":["React","useState","useEffect","FAIL_PROCESS","ERROR_MESSAGES","walletNotConnected","transactionTypeRequired","transactionTypeInvalid","amountRequired","nameRequired","symbolRequired","imageUrlRequired","supplyRequired","assetTypeRequired","assetTypeInvalid","assetIdRequired","receiverAddressRequired","precisionRequired","handleErrorResponse","error","status","result","handleSuccessResponse","openWalletWindow","url","window","inputWidth","inputHeight","viewportwidth","document","documentElement","clientWidth","tempW","top","outerWidth","tempH","outerHeight","tempSY","screenY","tempSX","screenX","y","x","open","WALLETURL","jsx","useConnector","createContext","resolvePromise","UseConnectorProvider","props","childWindow","setChildWindow","requestType","setRequestType","transactionData","setTransactionData","signData","setSignData","requestData","setRequestData","createAssetData","setCreateAssetData","transferAssetData","setTransferAssetData","chainId","networkType","networkState","setNetworkState","accountPublicKey","connectionState","address","accountXpubKey","walletState","setWalletState","signTransactionData","setSignTransactionData","addEventListener","handleMessage","removeEventListener","event","data","type","handlewalletLoadedMessage","close","updateNetworkInformation","updateWalletInformation","xpubKey","sendMessageToChildWindow","siteurl","location","origin","transactionType","amount","receiverAddress","feerate","feeRate","console","log","formValues","headline","name","imageUrl","supply","imagebase64Data","symbol","assetType","properties","assetId","precision","message","hex","postMessage","params","connect","Promise","resolve","networkInfo","disconnect","send","validateSendTransactionType","checkWalletConnection","createasset","transferasset","sign","signTransaction","signAlysTransaction","sendTransaction","validateTransactionVersion","signAndSendTransaction","transactionTypes","includes","children","Provider","value"],"mappings":"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","sourcesContent":["// src/hooks/useConnector.tsx\nimport React, { useState, useEffect } from \"react\";\n\n// src/helpers/errorMessages.tsx\nvar FAIL_PROCESS = \"Can't process your request\";\nvar ERROR_MESSAGES = {\n  walletNotConnected: \"The wallet is not connected.\",\n  transactionTypeRequired: `${FAIL_PROCESS}, Transaction Type is required`,\n  transactionTypeInvalid: `${FAIL_PROCESS}, Invalid transaction type`,\n  amountRequired: `${FAIL_PROCESS}, Amount is required`,\n  nameRequired: `${FAIL_PROCESS}, Name is required`,\n  symbolRequired: `${FAIL_PROCESS}, Symbol is required`,\n  imageUrlRequired: `${FAIL_PROCESS}, Image Url is required`,\n  supplyRequired: `${FAIL_PROCESS}, Supply is required`,\n  assetTypeRequired: `${FAIL_PROCESS}, Asset Type is required`,\n  assetTypeInvalid: `${FAIL_PROCESS}, Invalid Asset Type`,\n  assetIdRequired: `${FAIL_PROCESS}, Asset Id is required`,\n  receiverAddressRequired: `${FAIL_PROCESS}, Receiver Address is required`,\n  precisionRequired: `${FAIL_PROCESS}, Precision is required.`\n};\n\n// src/helpers/handleResponse.tsx\nvar handleErrorResponse = (error = null) => {\n  return { status: false, result: null, error };\n};\nvar handleSuccessResponse = (result = null) => {\n  return { status: true, result: result.result ? result.result : result, error: null };\n};\n\n// src/helpers/handleWalletWindow.tsx\nvar openWalletWindow = (url) => {\n  var inputWidth = 370;\n  var inputHeight = 550;\n  const viewportwidth = document.documentElement.clientWidth;\n  const tempW = window.top?.outerWidth;\n  const tempH = window.top?.outerHeight;\n  const tempSY = window.top?.screenY;\n  const tempSX = window.top?.screenX;\n  var y = tempH / 2 + tempSY - inputHeight / 2;\n  var x = tempW / 2 + tempSX - inputWidth / 2;\n  if (viewportwidth > 800) {\n    x = viewportwidth - 300;\n    y = 0;\n  }\n  return window.open(\n    url,\n    \"_blank\",\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${inputWidth}, height=${inputHeight}, right=0, top=${y}, left=${x}`\n  );\n};\n\n// src/config/walletApi.ts\nvar WALLETURL = \"http://localhost:3001/\";\n\n// src/hooks/useConnector.tsx\nimport { jsx } from \"react/jsx-runtime\";\nvar useConnector = React.createContext(null);\nvar resolvePromise = null;\nvar UseConnectorProvider = (props) => {\n  const [childWindow, setChildWindow] = useState(null);\n  const [requestType, setRequestType] = useState();\n  const [transactionData, setTransactionData] = useState({});\n  const [signData, setSignData] = useState({});\n  const [requestData, setRequestData] = React.useState(null);\n  const [createAssetData, setCreateAssetData] = React.useState({});\n  const [transferAssetData, setTransferAssetData] = React.useState({});\n  const [networkState, setNetworkState] = React.useState({\n    chainId: null,\n    networkType: \"\"\n  });\n  const [walletState, setWalletState] = React.useState({\n    accountPublicKey: \"\",\n    connectionState: \"disconnected\",\n    address: \"\",\n    accountXpubKey: \"\"\n  });\n  const [signTransactionData, setSignTransactionData] = useState();\n  useEffect(() => {\n    if (childWindow != null) {\n      window.addEventListener(\"message\", handleMessage);\n      return () => {\n        window.removeEventListener(\"message\", handleMessage);\n      };\n    }\n  }, [childWindow]);\n  const handleMessage = (event) => {\n    if (!event.data.type) return false;\n    if (event.data.type == \"webpackOk\") return false;\n    if (event.data.type === \"wallet-loaded\" /* walletLoaded */) return handlewalletLoadedMessage();\n    if (childWindow) childWindow.close();\n    if (!event.data.status) {\n      if (resolvePromise) {\n        return resolvePromise(handleErrorResponse(event.data.error ? event.data.error : event.data));\n      } else {\n        return handleErrorResponse(event.data.error ? event.data.error : event.data);\n      }\n    }\n    switch (event.data.type) {\n      case \"connection-response\" /* connectionResponse */:\n        updateNetworkInformation(event.data.result);\n        updateWalletInformation(\n          \"connected\",\n          event.data.result.accountPublicKey,\n          event.data.result.address,\n          event.data.result.xpubKey\n        );\n        resolvePromise(handleSuccessResponse(event.data));\n        break;\n      case \"account-not-created\" /* accountNotCreated */:\n        if (resolvePromise) resolvePromise(handleErrorResponse(event.data));\n        break;\n      case \"networkinfo-response\" /* networkinfoResponse */:\n        updateNetworkInformation(event.data.result);\n        updateWalletInformation(\n          \"connected\",\n          event.data.result.accountPublicKey,\n          event.data.result.address,\n          event.data.result.xpubKey\n        );\n        break;\n      case \"disconnect-response\" /* disconnectResponse */:\n        updateNetworkInformation({ chainId: null, networkType: \"\" });\n        updateWalletInformation(\"disconnected\", \"\", \"\", \"\");\n        if (resolvePromise) resolvePromise(handleSuccessResponse(event.data));\n        break;\n      default:\n        if (resolvePromise) resolvePromise(handleSuccessResponse(event.data));\n        break;\n    }\n  };\n  const handlewalletLoadedMessage = () => {\n    if (requestType === \"connect\" /* connect */ || requestType === \"disconnect\" /* disconnected */) {\n      sendMessageToChildWindow({\n        requestType,\n        siteurl: window.location.origin,\n        chainId: requestData ? requestData.chainId : 0\n      });\n    } else if (requestType === \"networkinfo\" /* networkinfo */) {\n      sendMessageToChildWindow({\n        requestType,\n        siteurl: window.location.origin\n      });\n    } else if (requestType === \"send\" /* send */) {\n      sendMessageToChildWindow({\n        requestType,\n        transactionType: transactionData.transactionType,\n        amount: transactionData.amount,\n        receiverAddress: transactionData.receiverAddress,\n        feerate: transactionData.feeRate,\n        chainId: networkState.chainId\n      });\n    } else if (requestType === \"create-asset\" /* createAsset */) {\n      console.log(\"createAssetData\", createAssetData);\n      const formValues = {\n        headline: createAssetData.name,\n        imageUrl: createAssetData.imageUrl,\n        supply: createAssetData.supply,\n        imagebase64Data: { data: \"\", type: \"\" },\n        symbol: createAssetData.symbol\n      };\n      sendMessageToChildWindow({\n        requestType,\n        transactionType: createAssetData.transactionType,\n        formValues,\n        assetType: createAssetData.assetType,\n        properties: createAssetData.properties,\n        chainId: networkState.chainId,\n        supply: createAssetData.supply,\n        receiverAddress: createAssetData.receiverAddress,\n        assetId: createAssetData.assetId,\n        precision: createAssetData.precision\n      });\n    } else if (requestType === \"transfer-asset\" /* transferAsset */) {\n      sendMessageToChildWindow({\n        requestType,\n        chainId: networkState.chainId,\n        supply: transferAssetData.supply,\n        receiverAddress: transferAssetData.receiverAddress,\n        assetId: transferAssetData.assetId\n      });\n    } else if (requestType === \"sign\" /* sign */) {\n      sendMessageToChildWindow({\n        requestType,\n        chainId: networkState.chainId,\n        message: signData.message\n      });\n    } else if (requestType === \"sign-transaction\" /* signTransaction */ || requestType === \"send-transaction\" /* sendTransaction */ || requestType === \"sign-and-send-transaction\" /* signAndSendTransaction */) {\n      sendMessageToChildWindow({\n        requestType,\n        chainId: networkState.chainId,\n        hex: signTransactionData?.hex,\n        transactionType: signTransactionData?.transactionType\n      });\n    } else if (requestType === \"send-alys\" /* sendAlys */) {\n      sendMessageToChildWindow({\n        requestType,\n        chainId: networkState.chainId,\n        hex: signTransactionData?.hex\n      });\n    }\n  };\n  const sendMessageToChildWindow = (data) => {\n    childWindow.postMessage(data, \"*\");\n  };\n  const updateNetworkInformation = (params) => {\n    setNetworkState({\n      chainId: params.chainId,\n      networkType: params.networkType\n    });\n  };\n  const updateWalletInformation = (connectionState, accountPublicKey, address, xpubKey) => {\n    setWalletState({\n      accountPublicKey,\n      connectionState,\n      address,\n      accountXpubKey: xpubKey\n    });\n  };\n  const connect = async (params) => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${\"connect\" /* connect */}`;\n      let childWindow2 = openWalletWindow(url);\n      setRequestType(\"connect\" /* connect */);\n      setChildWindow(childWindow2);\n      setRequestData({\n        chainId: params.chainId\n      });\n      updateWalletInformation(\"connecting\", \"\", \"\", \"\");\n      resolvePromise = resolve;\n    });\n  };\n  const networkInfo = async () => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${\"networkinfo\" /* networkinfo */}`;\n      let childWindow2 = openWalletWindow(url);\n      setRequestType(\"networkinfo\" /* networkinfo */);\n      setChildWindow(childWindow2);\n      resolvePromise = resolve;\n    });\n  };\n  const disconnect = () => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${\"disconnect\" /* disconnected */}&from=${window.location.origin}`;\n      let childWindow2 = openWalletWindow(url);\n      setRequestType(\"disconnect\" /* disconnected */);\n      setChildWindow(childWindow2);\n      updateWalletInformation(\"disconnecting\", \"\", \"\", \"\");\n      resolvePromise = resolve;\n    });\n  };\n  const send = (params) => {\n    if (!params.transactionType) return handleErrorResponse(ERROR_MESSAGES.transactionTypeRequired);\n    if (!params.amount) return handleErrorResponse(ERROR_MESSAGES.amountRequired);\n    if (!validateSendTransactionType(params.transactionType))\n      return handleErrorResponse(ERROR_MESSAGES.transactionTypeInvalid);\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\") && params.transactionType) {\n        const url = `${WALLETURL}?requestType=${\"send\" /* send */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"send\" /* send */);\n        setChildWindow(childWindow2);\n        setTransactionData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const checkWalletConnection = (resolve, transactionType) => {\n    let status = true;\n    let error = null;\n    if (networkState.chainId === null || networkState.networkType === \"\") {\n      status = false;\n      error = ERROR_MESSAGES.walletNotConnected;\n    } else if (transactionType && networkState.networkType === \"bitcoin\" /* bitcoin */) {\n      status = false;\n      error = ERROR_MESSAGES.transactionTypeInvalid;\n    }\n    if (!status) {\n      resolve({\n        status,\n        result: null,\n        error\n      });\n    }\n    return status;\n  };\n  const validateSendTransactionType = (transactionType) => {\n    let status = false;\n    if (transactionType === \"normal\" /* normal */) {\n      status = true;\n    } else if (transactionType === \"pegin\" /* pegin */) {\n      status = networkState.networkType === \"bitcoin\" /* bitcoin */;\n    } else if (transactionType === \"pegout\" /* pegout */) {\n      status = networkState.networkType === \"sidechain\" /* sidechain */ || networkState.networkType === \"alys\" /* alys */;\n    }\n    return status;\n  };\n  const createasset = (params) => {\n    if (!params.transactionType) return handleErrorResponse(ERROR_MESSAGES.transactionTypeRequired);\n    if (params.transactionType === \"create\" && !params.name)\n      return handleErrorResponse(ERROR_MESSAGES.nameRequired);\n    if (params.transactionType === \"create\" && !params.symbol)\n      return handleErrorResponse(ERROR_MESSAGES.symbolRequired);\n    if (params.transactionType === \"create\" && !params.imageUrl)\n      return handleErrorResponse(ERROR_MESSAGES.imageUrlRequired);\n    if (!params.supply) return handleErrorResponse(ERROR_MESSAGES.supplyRequired);\n    if (params.assetType === 0 && params.transactionType === \"create\" && !params.precision)\n      return handleErrorResponse(ERROR_MESSAGES.precisionRequired);\n    if (params.assetType === void 0 || params.assetType === null)\n      return handleErrorResponse(ERROR_MESSAGES.assetTypeRequired);\n    return new Promise((resolve) => {\n      if (params.transactionType && checkWalletConnection(resolve, params.transactionType)) {\n        const url = `${WALLETURL}?requestType=${\"create-asset\" /* createAsset */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"create-asset\" /* createAsset */);\n        setChildWindow(childWindow2);\n        setCreateAssetData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const transferasset = (params) => {\n    if (!params.assetId) return handleErrorResponse(ERROR_MESSAGES.assetIdRequired);\n    if (!params.receiverAddress) return handleErrorResponse(ERROR_MESSAGES.receiverAddressRequired);\n    if (!params.supply) return handleErrorResponse(ERROR_MESSAGES.supplyRequired);\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"transfer\")) {\n        const url = `${WALLETURL}?requestType=${\"transfer-asset\" /* transferAsset */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"transfer-asset\" /* transferAsset */);\n        setChildWindow(childWindow2);\n        setTransferAssetData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const sign = (params) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${\"sign\" /* sign */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"sign\" /* sign */);\n        setChildWindow(childWindow2);\n        setSignData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const signTransaction = (params) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${\"sign-transaction\" /* signTransaction */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"sign-transaction\" /* signTransaction */);\n        setChildWindow(childWindow2);\n        setSignTransactionData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const signAlysTransaction = (params) => {\n    console.log(\"params----------------\", params);\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${\"send-alys\" /* sendAlys */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"send-alys\" /* sendAlys */);\n        setChildWindow(childWindow2);\n        console.log(\"params-------------------- : \", params);\n        setSignTransactionData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const sendTransaction = (params) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\") && validateTransactionVersion(params.transactionType, resolve)) {\n        const url = `${WALLETURL}?requestType=${\"send-transaction\" /* sendTransaction */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"send-transaction\" /* sendTransaction */);\n        setChildWindow(childWindow2);\n        setSignTransactionData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const signAndSendTransaction = (params) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\") && validateTransactionVersion(params.transactionType, resolve)) {\n        const url = `${WALLETURL}?requestType=${\"sign-and-send-transaction\" /* signAndSendTransaction */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"sign-and-send-transaction\" /* signAndSendTransaction */);\n        setChildWindow(childWindow2);\n        setSignTransactionData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const validateTransactionVersion = (type, resolve) => {\n    const transactionTypes = [\"normal\", \"premium\"];\n    if (!transactionTypes.includes(type)) {\n      resolve({\n        status: false,\n        result: null,\n        error: ERROR_MESSAGES.transactionTypeInvalid\n      });\n      return false;\n    }\n    return true;\n  };\n  const { children } = props;\n  return /* @__PURE__ */ jsx(\n    useConnector.Provider,\n    {\n      value: {\n        walletState,\n        networkState,\n        connect,\n        networkInfo,\n        disconnect,\n        send,\n        createasset,\n        transferasset,\n        sign,\n        signTransaction,\n        sendTransaction,\n        signAndSendTransaction,\n        signAlysTransaction\n      },\n      children\n    }\n  );\n};\nexport {\n  UseConnectorProvider,\n  useConnector\n};\n","/*\nProject : Anduro Wallet Connector\nFileName : useConnector.tsx\nAuthor : \nFile Created : 04/03/2024\nCopyRights : \nPurpose : This is the file that is used to handle connect , disconnect and manage anduro wallet.\n*/\nimport React, { useState, useEffect, useRef } from \"react\"\nimport { ERROR_MESSAGES } from \"../helpers/errorMessages\"\nimport { handleErrorResponse, handleSuccessResponse } from \"../helpers/handleResponse\"\nimport { openWalletWindow } from \"../helpers/handleWalletWindow\"\nimport { WALLETURL } from \"../config/walletApi\"\n\ninterface WalletState {\n  accountPublicKey: string\n  connectionState: string\n  address: string\n  accountXpubKey: string\n}\ninterface NetworkState {\n  chainId: any\n  networkType: string\n}\ninterface connectParams {\n  chainId: number\n}\ninterface SignParams {\n  message?: string\n}\ninterface createTransactionParams {\n  transactionType?: string\n  amount?: number\n  receiverAddress?: string | undefined\n  feeRate?: number | undefined\n}\ninterface PropertiesType {\n  type: string\n  value: string\n}\ninterface CreateassetParams {\n  name?: string\n  symbol?: string\n  imageUrl?: string\n  supply?: number\n  properties?: PropertiesType[]\n  assetType?: number\n  transactionType?: string\n  receiverAddress?: string | undefined\n  assetId?: number | undefined\n  precision?: number | undefined\n}\ninterface TransferAssetParams {\n  assetId?: number\n  receiverAddress?: string\n  supply?: number\n}\ninterface SignTransactionParams {\n  hex: string\n  transactionType: string\n}\nenum RequestTypes {\n  connect = \"connect\",\n  disconnected = \"disconnect\",\n  accountNotCreated = \"account-not-created\",\n  walletLoaded = \"wallet-loaded\",\n  networkinfo = \"networkinfo\",\n  send = \"send\",\n  createAsset = \"create-asset\",\n  transferAsset = \"transfer-asset\",\n  sign = \"sign\",\n  signTransaction = \"sign-transaction\",\n  sendTransaction = \"send-transaction\",\n  signAndSendTransaction = \"sign-and-send-transaction\",\n  sendAlys = \"send-alys\",\n}\n\nenum ResponseTypes {\n  connectionResponse = \"connection-response\",\n  networkinfoResponse = \"networkinfo-response\",\n  sendResponse = \"send-response\",\n  createAssetResponse = \"create-asset-response\",\n  disconnectResponse = \"disconnect-response\",\n}\n\nenum TransactionTypes {\n  bitcoin = \"bitcoin\",\n  sidechain = \"sidechain\",\n  alys = \"alys\",\n  normal = \"normal\",\n  pegin = \"pegin\",\n  pegout = \"pegout\",\n}\n\ntype UseConnectorContextContextType = {\n  networkState: NetworkState\n  walletState: WalletState\n  connect: (params: connectParams) => object\n  networkInfo: () => object\n  sign: (params: SignParams) => object\n  transferasset: (params: TransferAssetParams) => object\n  createasset: (params: CreateassetParams) => object\n  send: (params: createTransactionParams) => object\n  disconnect: () => object\n  signTransaction: (params: SignTransactionParams) => object\n  sendTransaction: (params: SignTransactionParams) => object\n  signAndSendTransaction: (params: SignTransactionParams) => object\n  signAlysTransaction: (params: SignTransactionParams) => object\n}\nexport const useConnector = React.createContext<UseConnectorContextContextType | null>(null)\nlet resolvePromise: any = null\nexport const UseConnectorProvider = (props: any) => {\n  const [childWindow, setChildWindow] = useState<any>(null)\n  const [requestType, setRequestType] = useState<RequestTypes>()\n  const [transactionData, setTransactionData] = useState<createTransactionParams>({})\n  const [signData, setSignData] = useState<SignParams>({})\n  const [requestData, setRequestData] = React.useState<any>(null)\n  const [createAssetData, setCreateAssetData] = React.useState<CreateassetParams>({})\n  const [transferAssetData, setTransferAssetData] = React.useState<TransferAssetParams>({})\n  const [networkState, setNetworkState] = React.useState<NetworkState>({\n    chainId: null,\n    networkType: \"\",\n  })\n  const [walletState, setWalletState] = React.useState<WalletState>({\n    accountPublicKey: \"\",\n    connectionState: \"disconnected\",\n    address: \"\",\n    accountXpubKey: \"\",\n  })\n  const [signTransactionData, setSignTransactionData] = useState<SignTransactionParams>()\n\n  useEffect(() => {\n    if (childWindow != null) {\n      window.addEventListener(\"message\", handleMessage)\n      return () => {\n        window.removeEventListener(\"message\", handleMessage)\n      }\n    }\n  }, [childWindow])\n\n  /**\n   * The following function used for listening messages from anduro wallet extension\n   *\n   * @param event Event message\n   *\n   */\n  const handleMessage = (event: any) => {\n    if (!event.data.type) return false\n\n    if (event.data.type == \"webpackOk\") return false\n\n    if (event.data.type === RequestTypes.walletLoaded) return handlewalletLoadedMessage()\n\n    if (childWindow) childWindow.close()\n\n    if (!event.data.status) {\n      if (resolvePromise) {\n        return resolvePromise(handleErrorResponse(event.data.error ? event.data.error : event.data))\n      } else {\n        return handleErrorResponse(event.data.error ? event.data.error : event.data)\n      }\n    }\n\n    switch (event.data.type) {\n      case ResponseTypes.connectionResponse:\n        updateNetworkInformation(event.data.result)\n        updateWalletInformation(\n          \"connected\",\n          event.data.result.accountPublicKey,\n          event.data.result.address,\n          event.data.result.xpubKey,\n        )\n        resolvePromise(handleSuccessResponse(event.data))\n        break\n      case RequestTypes.accountNotCreated:\n        if (resolvePromise) resolvePromise(handleErrorResponse(event.data))\n        break\n      case ResponseTypes.networkinfoResponse:\n        updateNetworkInformation(event.data.result)\n        updateWalletInformation(\n          \"connected\",\n          event.data.result.accountPublicKey,\n          event.data.result.address,\n          event.data.result.xpubKey,\n        )\n        break\n      case ResponseTypes.disconnectResponse:\n        updateNetworkInformation({ chainId: null, networkType: \"\" })\n        updateWalletInformation(\"disconnected\", \"\", \"\", \"\")\n        if (resolvePromise) resolvePromise(handleSuccessResponse(event.data))\n        break\n      default:\n        if (resolvePromise) resolvePromise(handleSuccessResponse(event.data))\n        break\n    }\n  }\n  /**\n   * The following function used for listening messages from wallet and once wallet loaded, send message to child window\n   */\n  const handlewalletLoadedMessage = () => {\n    if (requestType === RequestTypes.connect || requestType === RequestTypes.disconnected) {\n      sendMessageToChildWindow({\n        requestType,\n        siteurl: window.location.origin,\n        chainId: requestData ? requestData.chainId : 0,\n      })\n    } else if (requestType === RequestTypes.networkinfo) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        siteurl: window.location.origin,\n      })\n    } else if (requestType === RequestTypes.send) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        transactionType: transactionData.transactionType,\n        amount: transactionData.amount,\n        receiverAddress: transactionData.receiverAddress,\n        feerate: transactionData.feeRate,\n        chainId: networkState.chainId,\n      })\n    } else if (requestType === RequestTypes.createAsset) {\n      console.log(\"createAssetData\", createAssetData)\n      const formValues = {\n        headline: createAssetData.name,\n        imageUrl: createAssetData.imageUrl,\n        supply: createAssetData.supply,\n        imagebase64Data: { data: \"\", type: \"\" },\n        symbol: createAssetData.symbol,\n      }\n      sendMessageToChildWindow({\n        requestType: requestType,\n        transactionType: createAssetData.transactionType,\n        formValues,\n        assetType: createAssetData.assetType,\n        properties: createAssetData.properties,\n        chainId: networkState.chainId,\n        supply: createAssetData.supply,\n        receiverAddress: createAssetData.receiverAddress,\n        assetId: createAssetData.assetId,\n        precision: createAssetData.precision,\n      })\n    } else if (requestType === RequestTypes.transferAsset) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        chainId: networkState.chainId,\n        supply: transferAssetData.supply,\n        receiverAddress: transferAssetData.receiverAddress,\n        assetId: transferAssetData.assetId,\n      })\n    } else if (requestType === RequestTypes.sign) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        chainId: networkState.chainId,\n        message: signData.message,\n      })\n    } else if (\n      requestType === RequestTypes.signTransaction ||\n      requestType === RequestTypes.sendTransaction ||\n      requestType === RequestTypes.signAndSendTransaction\n    ) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        chainId: networkState.chainId,\n        hex: signTransactionData?.hex,\n        transactionType: signTransactionData?.transactionType,\n      })\n    } else if (requestType === RequestTypes.sendAlys) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        chainId: networkState.chainId,\n        hex: signTransactionData?.hex,\n      })\n    }\n  }\n  /**\n   * The following function used for sending messages to anduro wallet extension\n   *\n   * @param data Data to send to the wallet\n   *\n   */\n  const sendMessageToChildWindow = (data: any) => {\n    childWindow.postMessage(data, \"*\")\n  }\n\n  /**\n   * The following function used for setting network information in library\n   *\n   * @param params Event message\n   *\n   */\n  const updateNetworkInformation = (params: any) => {\n    setNetworkState({\n      chainId: params.chainId,\n      networkType: params.networkType,\n    })\n  }\n\n  /**\n   * The following function used for setting wallet account public key , connection state information in library\n   *\n   * @param connectionState The connection state of the Anduro wallet\n   * @param accountPublicKey The Anduro wallet account public key\n   *\n   */\n  const updateWalletInformation = (\n    connectionState: string,\n    accountPublicKey: string,\n    address: string,\n    xpubKey: string,\n  ) => {\n    setWalletState({\n      accountPublicKey: accountPublicKey,\n      connectionState: connectionState,\n      address: address,\n      accountXpubKey: xpubKey,\n    })\n  }\n\n  /**\n   * The following function used for connecting anduro wallet extension\n   *\n   * @param chainId Chain ID for connecting the Anduro wallet\n   *\n   */\n  const connect = async (params: connectParams) => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${RequestTypes.connect}`\n      let childWindow = openWalletWindow(url)\n      setRequestType(RequestTypes.connect)\n      setChildWindow(childWindow)\n      setRequestData({\n        chainId: params.chainId,\n      })\n      updateWalletInformation(\"connecting\", \"\", \"\", \"\")\n      resolvePromise = resolve\n    })\n  }\n\n  /**\n   * The following function used for initialize wallet and get network info\n   */\n  const networkInfo = async () => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${RequestTypes.networkinfo}`\n      let childWindow = openWalletWindow(url)\n      setRequestType(RequestTypes.networkinfo)\n      setChildWindow(childWindow)\n      resolvePromise = resolve\n    })\n  }\n  /**\n   * The following function used for disconnecting anduro wallet extension\n   */\n  const disconnect = () => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${RequestTypes.disconnected}&from=${window.location.origin}`\n      let childWindow = openWalletWindow(url)\n      setRequestType(RequestTypes.disconnected)\n      setChildWindow(childWindow)\n      updateWalletInformation(\"disconnecting\", \"\", \"\", \"\")\n      resolvePromise = resolve\n    })\n  }\n\n  /**\n   * The following function used for send BTC / CBTC to receiver and\n   * convert BTC to CBTC / CBTC to BTC in anduro wallet\n   *\n   * @param transactionType transactionType:\n   *                          1. normal - Send BTC / CBTC OR CBTC / BTC\n   *                          2. pegin - Convert BTC to CBTC\n   *                          3. pegout - Convert CBTC to BTC\n   * @param amount transaction amount\n   * @param receiverAddress (Optional) Receiver address ( coordinate address / bitcoin address )\n   * @param feeRate (Optional) Fee rate per virtual byte\n   *\n   */\n  const send = (params: createTransactionParams) => {\n    if (!params.transactionType) return handleErrorResponse(ERROR_MESSAGES.transactionTypeRequired)\n\n    if (!params.amount) return handleErrorResponse(ERROR_MESSAGES.amountRequired)\n\n    if (!validateSendTransactionType(params.transactionType))\n      return handleErrorResponse(ERROR_MESSAGES.transactionTypeInvalid)\n\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\") && params.transactionType) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.send}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.send)\n        setChildWindow(childWindow)\n        setTransactionData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for checking anduro wallet is in connected state or not\n   *\n   * @param onError\n   * @param transactionType\n   *\n   */\n  const checkWalletConnection = (resolve: any, transactionType: string) => {\n    let status: boolean = true\n    let error: any = null\n    if (networkState.chainId === null || networkState.networkType === \"\") {\n      status = false\n      error = ERROR_MESSAGES.walletNotConnected\n    } else if (transactionType && networkState.networkType === TransactionTypes.bitcoin) {\n      status = false\n      error = ERROR_MESSAGES.transactionTypeInvalid\n    }\n    if (!status) {\n      resolve({\n        status: status,\n        result: null,\n        error,\n      })\n    }\n    return status\n  }\n\n  /**\n   * The following function is used to validate transaction types\n   *\n   * @param transactionType\n   *\n   */\n  const validateSendTransactionType = (transactionType: string) => {\n    let status: boolean = false\n    if (transactionType === TransactionTypes.normal) {\n      status = true\n    } else if (transactionType === TransactionTypes.pegin) {\n      status = networkState.networkType === TransactionTypes.bitcoin\n    } else if (transactionType === TransactionTypes.pegout) {\n      status =\n        networkState.networkType === TransactionTypes.sidechain ||\n        networkState.networkType === TransactionTypes.alys\n    }\n    return status\n  }\n\n  /**\n   * The following function used for creating asset in anduro wallet\n   *\n   * @param name The asset's name\n   * @param symbol The asset's symbol\n   * @param imageUrl The asset's image URL\n   * @param supply The asset's total supply\n   * @param properties The asset's trait data\n   * @param assetType assetType :\n   *                    1. 0 for creating tokens.\n   *                    2. 1 for creating NFT.\n   * @param transactionType transactionType: create OR mint\n   * @param receiverAddress (Optional) Required for mint transactions\n   * @param assetId (Optional) Required for mint transactions\n   *\n   */\n  const createasset = (params: CreateassetParams) => {\n    if (!params.transactionType) return handleErrorResponse(ERROR_MESSAGES.transactionTypeRequired)\n\n    if (params.transactionType === \"create\" && !params.name)\n      return handleErrorResponse(ERROR_MESSAGES.nameRequired)\n\n    if (params.transactionType === \"create\" && !params.symbol)\n      return handleErrorResponse(ERROR_MESSAGES.symbolRequired)\n\n    if (params.transactionType === \"create\" && !params.imageUrl)\n      return handleErrorResponse(ERROR_MESSAGES.imageUrlRequired)\n\n    if (!params.supply) return handleErrorResponse(ERROR_MESSAGES.supplyRequired)\n\n    if (params.assetType === 0 && params.transactionType === \"create\" && !params.precision)\n      return handleErrorResponse(ERROR_MESSAGES.precisionRequired)\n\n    if (params.assetType === undefined || params.assetType === null)\n      return handleErrorResponse(ERROR_MESSAGES.assetTypeRequired)\n\n    return new Promise((resolve) => {\n      if (params.transactionType && checkWalletConnection(resolve, params.transactionType)) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.createAsset}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.createAsset)\n        setChildWindow(childWindow)\n        setCreateAssetData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for transfer asset / mint  in anduro wallet\n   *\n   * @param assetId The asset ID\n   * @param receiverAddress Receiver Address\n   * @param supply supply to transfer\n   *\n   */\n  const transferasset = (params: TransferAssetParams) => {\n    if (!params.assetId) return handleErrorResponse(ERROR_MESSAGES.assetIdRequired)\n\n    if (!params.receiverAddress) return handleErrorResponse(ERROR_MESSAGES.receiverAddressRequired)\n\n    if (!params.supply) return handleErrorResponse(ERROR_MESSAGES.supplyRequired)\n\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"transfer\")) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.transferAsset}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.transferAsset)\n        setChildWindow(childWindow)\n        setTransferAssetData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for sign process\n   *\n   * @param message The sign message\n   *\n   */\n  const sign = (params: SignParams) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.sign}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.sign)\n        setChildWindow(childWindow)\n        setSignData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for sign process\n   *\n   * @param hex The raw transaction hex\n   *\n   */\n  const signTransaction = (params: SignTransactionParams) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.signTransaction}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.signTransaction)\n        setChildWindow(childWindow)\n        setSignTransactionData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for sign process\n   *\n   * @param hex The raw transaction hex\n   *\n   */\n  const signAlysTransaction = (params: SignTransactionParams) => {\n    console.log(\"params----------------\", params)\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.sendAlys}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.sendAlys)\n        setChildWindow(childWindow)\n        console.log(\"params-------------------- : \", params)\n        setSignTransactionData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n  /**\n   * The following function used for sign process\n   *\n   * @param hex The signed transaction hex\n   *\n   */\n  const sendTransaction = (params: SignTransactionParams) => {\n    return new Promise((resolve) => {\n      if (\n        checkWalletConnection(resolve, \"\") &&\n        validateTransactionVersion(params.transactionType, resolve)\n      ) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.sendTransaction}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.sendTransaction)\n        setChildWindow(childWindow)\n        setSignTransactionData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n  /**\n   * The following function used for sign process\n   *\n   * @param hex The signed transaction hex\n   *\n   */\n  const signAndSendTransaction = (params: SignTransactionParams) => {\n    return new Promise((resolve) => {\n      if (\n        checkWalletConnection(resolve, \"\") &&\n        validateTransactionVersion(params.transactionType, resolve)\n      ) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.signAndSendTransaction}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.signAndSendTransaction)\n        setChildWindow(childWindow)\n        setSignTransactionData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n  const validateTransactionVersion = (type: string, resolve: any): boolean => {\n    const transactionTypes: string[] = [\"normal\", \"premium\"]\n    if (!transactionTypes.includes(type)) {\n      resolve({\n        status: false,\n        result: null,\n        error: ERROR_MESSAGES.transactionTypeInvalid,\n      })\n      return false\n    }\n    return true\n  }\n\n  const { children } = props\n  return (\n    <useConnector.Provider\n      value={{\n        walletState,\n        networkState,\n        connect,\n        networkInfo,\n        disconnect,\n        send,\n        createasset,\n        transferasset,\n        sign,\n        signTransaction,\n        sendTransaction,\n        signAndSendTransaction,\n        signAlysTransaction,\n      }}\n    >\n      {children}\n    </useConnector.Provider>\n  )\n}\n","/*\nProject : Anduro Wallet Connector\nFileName : handleResponse.tsx\nAuthor : \nFile Created : 13/04/2024\nCopyRights : \nPurpose : This is the file that is used to store error message verbiage\n*/\n\nconst FAIL_PROCESS = \"Can't process your request\"\nexport const ERROR_MESSAGES = {\n  walletNotConnected: \"The wallet is not connected.\",\n  transactionTypeRequired: `${FAIL_PROCESS}, Transaction Type is required`,\n  transactionTypeInvalid: `${FAIL_PROCESS}, Invalid transaction type`,\n  amountRequired: `${FAIL_PROCESS}, Amount is required`,\n  nameRequired: `${FAIL_PROCESS}, Name is required`,\n  symbolRequired: `${FAIL_PROCESS}, Symbol is required`,\n  imageUrlRequired: `${FAIL_PROCESS}, Image Url is required`,\n  supplyRequired: `${FAIL_PROCESS}, Supply is required`,\n  assetTypeRequired: `${FAIL_PROCESS}, Asset Type is required`,\n  assetTypeInvalid: `${FAIL_PROCESS}, Invalid Asset Type`,\n  assetIdRequired: `${FAIL_PROCESS}, Asset Id is required`,\n  receiverAddressRequired: `${FAIL_PROCESS}, Receiver Address is required`,\n  precisionRequired: `${FAIL_PROCESS}, Precision is required.`,\n}\n","/*\nProject : Anduro Wallet Connector\nFileName : handleResponse.tsx\nAuthor : \nFile Created : 13/04/2024\nCopyRights : \nPurpose : This is the file that is used to handle response structure.\n*/\n\n/**\n * The following function used to handle error response structure\n * @param error\n */\nexport const handleErrorResponse = (error: any = null) => {\n  return { status: false, result: null, error }\n}\n/**\n * The following function used to handle success response structure\n * @param result\n */\nexport const handleSuccessResponse = (result: any = null) => {\n  return { status: true, result: result.result ? result.result : result, error: null }\n}\n","/*\nProject : Anduro Wallet Connector\nFileName : handleWalletWindow.tsx\nAuthor : \nFile Created : 13/04/2024\nCopyRights : \nPurpose : This is the file that is used to handle wallet window.\n*/\n/**\n * The following function used to handle wallet window opening part\n * @param url The URL of the page to open.\n * @returns A reference to the opened window\n */\nexport const openWalletWindow = (url: any) => {\n  var inputWidth = 370\n  var inputHeight = 550\n  const viewportwidth = document.documentElement.clientWidth\n  const tempW: any = window.top?.outerWidth\n  const tempH: any = window.top?.outerHeight\n  const tempSY: any = window.top?.screenY\n  const tempSX: any = window.top?.screenX\n  var y = tempH / 2 + tempSY - inputHeight / 2\n  var x = tempW / 2 + tempSX - inputWidth / 2\n  if (viewportwidth > 800) {\n    x = viewportwidth - 300\n    y = 0\n  }\n  return window.open(\n    url,\n    \"_blank\",\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${inputWidth}, height=${inputHeight}, right=0, top=${y}, left=${x}`,\n  )\n}\n","export const WALLETURL = \"http://localhost:3001/\"\n"]}