{"version":3,"sources":["../src/index.ts","../src/hooks/useConnector.tsx","../src/config/WalletConfig.ts"],"names":["React","childWindow"],"mappings":"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","sourcesContent":["export { useConnector, UseConnectorProvider } from \"./hooks/useConnector\"; ","import React, { useState, useEffect } from \"react\";\nimport { WALLETURL } from \"../config/WalletConfig\";\n\ninterface WalletState {\n    accountPublicKey: string; // wallet account public key\n    connectionState: string; // connection state\n};\ninterface NetworkState {\n    chainId: any; // Chain ID\n    networkType: string; // Chain type (bitcoin OR sidechain)\n};\n\ninterface connectParams {\n    chainId: number;\n    onComplete: any;\n};\ninterface createTransactionParams {\n    transactionType: string;\n    amount: number;\n    receiverAddress?: string | undefined;\n    feeRate?: number | undefined;\n    onComplete: any;\n};\ninterface PropertiesType {\n    type: string;\n    value: string;\n};\ninterface CreateassetParams {\n    name: string;\n    symbol: string;\n    imageUrl: string;\n    supply: number;\n    properties: PropertiesType[];\n    assetType: number;\n    transactionType: string;\n    receiverAddress: string;\n    onComplete: any;\n    assetId?: number;\n}\ninterface TransferAssetParams {\n    assetId: number;\n    receiverAddress: string;\n    supply: number;\n    onComplete: any;\n}\ninterface WalletInfo {\n    accountPublicKey: string; // wallet account public key\n    connectionState: string; // connection state\n};\nenum requestTypes {\n  connect = 'connect',\n  disconnected = 'disconnected',\n  connectionResponse = 'connection-response',\n  accountNotCreated = 'account-not-created',\n  walletLoaded = 'wallet-loaded',\n  networkinfo = 'networkinfo',\n  send = 'send',\n  createAsset = 'create-asset',\n  transferAsset = 'transfer-asset',\n  networkinfoResponse = 'networkinfo-response',\n  sendResponse = 'send-response',\n  createAssetResponse = 'create-asset-response',\n  disconnectResponse = 'disconnect-response',\n  bitcoin = 'bitcoin',\n  sidechain = 'sidechain',\n  normal = 'normal',\n  pegin = 'pegin',\n  pegout = 'pegout'\n};\n\ntype UseConnectorContextContextType = {\n  networkState: NetworkState;\n  walletState: WalletState;\n  connect: any;\n  disconnect: any;\n  send: any;\n  createasset: any;\n  transferasset: any;\n  isConnected: boolean;\n}\nexport const useConnector = React.createContext<UseConnectorContextContextType | null>(\n    null,\n)\nexport const UseConnectorProvider = (props: any) => {\n    const [childWindow, setChildWindow] = useState<any>(null);\n    const [requestType, setRequestType] = useState(\"\");\n    const [isConnected, setIsConnected] = useState(false);\n    const [transactionData, setTransactionData] = useState<createTransactionParams>({\n      transactionType: \"\",\n      amount: 0,\n      receiverAddress: \"\",\n      feeRate: 1,\n      onComplete: null\n    });\n    const [requestData, setRequestData] = React.useState<any>(null);\n    const [createAssetData, setCreateAssetData] = React.useState<CreateassetParams>({\n      name: \"\",\n      symbol: \"\",\n      imageUrl: \"\",\n      supply: 0,\n      properties: [{type: \"\", value: \"\",}],\n      assetType: 0,\n      transactionType: \"\",\n      receiverAddress: \"\",\n      onComplete: null,\n    });\n    const [transferAssetData, setTransferAssetData] = React.useState<TransferAssetParams>({\n      assetId: 0,\n      receiverAddress: \"\",\n      supply: 0,\n      onComplete: null,\n    });\n    const [networkState, setNetworkState] = React.useState<NetworkState>({chainId: null, networkType: \"\"})\n    const [walletState, setWalletState] = React.useState<WalletState>({accountPublicKey: \"\", connectionState: \"disconnected\"})\n    const windowFeatures = \"left=1000,top=100,width=370,height=550,fullscreen=yes,toolbar=no,menubar=no,scrollbars=no,resizable=no,location=no,directories=no, status=no, titlebar=no\";\n    \n    useEffect(() => {\n     \n      if (networkState.chainId === null && childWindow === null && !isConnected) {\n        const url = `${WALLETURL}?requestType=networkinfo`;\n        let targetWindow: any = window.open(url,\"_blank\",windowFeatures);\n        setChildWindow(targetWindow)\n        setRequestType(\"networkinfo\")\n      }\n    }, [networkState,isConnected]);\n    \n    useEffect(() => {\n      console.log('isConnectedeeeee1111', isConnected)\n      if (childWindow != null) {\n        console.log(\"close\")\n        childWindow.addEventListener(\"beforeunload\", handleWindowClose);\n        window.addEventListener(\"beforeunload\", handleWindowClose);\n        window.addEventListener('message', handleMessage);\n        return () => {\n          childWindow.removeEventListener(\"beforeunload\", handleWindowClose);\n          window.removeEventListener('message', handleMessage);\n        };\n      }\n    }, [childWindow,isConnected]);\n    \n    const handleWindowClose = () => {\n      alert(\"Window closed\");\n    };\n  \n    const handleMessage = (event: any) => {\n      console.log(\"Message Received\", event.data)\n      if (event.data.type === requestTypes.connectionResponse) {\n        if (event.data.status) {\n          childWindow.close();\n          setTimeout(() => {\n            setIsConnected(true);\n          })          \n          console.log('isconnected2222', isConnected)\n          updateNetworkInformation(event.data.result)\n          requestData.onComplete(event.data);\n          console.log(\"test22222\")\n          console.log('isconnected22221111', isConnected)\n          updateWalletInformation(\"connected\", event.data.result.accountPublicKey)          \n        } else {\n          requestData.onComplete(event.data)\n        }\n      } else if (event.data.type === requestTypes.accountNotCreated) {\n        childWindow.close()\n        requestData.onComplete(event.data)\n      } else if (event.data.type === requestTypes.walletLoaded) {\n        if (event.data.status) {\n          if (requestType === requestTypes.connect || requestType === requestTypes.disconnected) {\n            sendMessageToChildWindow({requestType, siteurl: window.location.origin, chainId: requestData.chainId});\n            console.log(\"test1\")\n          } else if (requestType === requestTypes.networkinfo) {\n            sendMessageToChildWindow({requestType: requestType, siteurl: window.location.origin})\n          } else if (requestType === requestTypes.send) {\n            sendMessageToChildWindow({requestType: requestType, transactionType: transactionData.transactionType, amount: transactionData.amount, receiverAddress: transactionData.receiverAddress, feerate: transactionData.feeRate, chainId: networkState.chainId })\n          } else if (requestType === requestTypes.createAsset) {\n            const formValues = {\n              headline: createAssetData.name,\n              imageUrl: createAssetData.imageUrl,\n              supply: createAssetData.supply,\n              imagebase64Data: {data: \"\", type: \"\"},\n              symbol: createAssetData.symbol,\n            }\n            sendMessageToChildWindow({requestType: requestType, transactionType: createAssetData.transactionType, formValues, assetType: createAssetData.assetType, properties: createAssetData.properties, chainId: networkState.chainId, supply: createAssetData.supply, receiverAddress: createAssetData.receiverAddress, assetId: createAssetData.assetId })\n          } else if (requestType === requestTypes.transferAsset) {\n            sendMessageToChildWindow({requestType: requestType, chainId: networkState.chainId, supply: transferAssetData.supply, receiverAddress: transferAssetData.receiverAddress, assetId: transferAssetData.assetId })\n          }\n        }\n      } else if (event.data.type === requestTypes.networkinfoResponse) {\n        childWindow.close()\n        if (event.data.status) {\n            updateNetworkInformation(event.data.result)\n        }\n      } \n      else if (event.data.type === requestTypes.sendResponse || event.data.type === requestTypes.createAssetResponse || event.data.type === requestTypes.disconnectResponse) {\n        childWindow.close()\n        if (transactionData.onComplete) {\n          transactionData.onComplete(event.data)\n        } else if (createAssetData.onComplete) {\n          createAssetData.onComplete(event.data)\n        }\n        if (event.data.type === \"disconnect-response\") {\n          updateWalletInformation(\"disconnected\", \"\")\n        }\n      }\n    }\n    const sendMessageToChildWindow = (data: any) => {\n      childWindow.postMessage(data, \"*\");\n    }\n    const updateNetworkInformation = (params: any) => {\n        setNetworkState({\n            chainId: params.chainId,\n            networkType: params.networkType,\n        });\n    }\n    const updateWalletInformation = (connectionState: string, accountPublicKey: string) => {\n      setWalletState({\n        accountPublicKey: accountPublicKey,\n        connectionState: connectionState,\n      })\n    }\n    const connect = (params: connectParams) => {\n      return new Promise((resolve, reject) => {\n        const url = `${WALLETURL}?requestType=connect`;\n        let childWindow = window.open(url,\"_blank\",windowFeatures);\n        setRequestType(\"connect\")\n        setChildWindow(childWindow)\n        console.log(\"datares4\", params)\n        setRequestData({\n          chainId: params.chainId,\n          onComplete: params.onComplete,\n        })\n        updateWalletInformation(\"connecting\", \"\")\n        console.log(\"datares1\", params)\n        console.log('isconnected', isConnected)\n        // while (1 > 0) {\n        //   console.log('isconnected1111ggggg', isConnected)\n        //   if (isConnected) {\n        //     break;\n        //   } else {\n        //     continue;\n        //   }\n        // }\n        // resolve(true)\n        // walletEvent.on(\"connectionresponse\", async (data) =>{\n        //   console.log(\"datares\", data)\n        //   let response = await data;\n        //   console.log(\"datares111\", response)\n        //   resolve(response)\n        // })\n      })  \n    }\n  \n    const disconnect = () => {\n      const url = `${WALLETURL}?requestType=disconnect`;\n      let childWindow = window.open(url,\"_blank\",windowFeatures);\n      setRequestType(\"disconnect\")\n      setChildWindow(childWindow)\n      updateWalletInformation(\"disconnecting\", \"\")\n    }\n    const getNetworkInformation = () => {\n      return networkState;\n    }\n    const getWalletInformation = () => {\n      return walletState;\n    }\n    const send = (params: createTransactionParams) => {\n      if (checkWalletConnection(params.onComplete, \"\")) {\n        const validateTransactionTypeResult = validateSendTransactionType(params.transactionType)\n        if (!validateTransactionTypeResult) {\n          params.onComplete({\n            status: false,\n            error: \"can't process your request, Invalid transaction type\",\n            result: null,\n          })\n          return;\n        }\n        const url = `${WALLETURL}?requestType=send`;\n        let childWindow = window.open(url,\"_blank\",windowFeatures);\n        setRequestType(\"send\")\n        setChildWindow(childWindow)\n        setTransactionData(params)\n      }\n    }\n    const checkWalletConnection = (onError: any, transactionType: string) => {\n      let status: boolean = true;\n      let error: any = null;\n      if (networkState.chainId === null || networkState.networkType === \"\") {\n        status = false\n        error = \"The wallet is not connected.\"\n      } else if (transactionType && networkState.networkType === requestTypes.bitcoin) {\n        status = false\n        error = \"can't process your request, Invalid transaction type.\"\n      }\n      if (!status) {\n        onError({\n          status: status,\n          result: null,\n          error,\n        })\n      }\n      return status\n    }\n    const validateSendTransactionType = (transactionType: string) => {\n      let status: boolean = false\n      if (transactionType === requestTypes.normal) {\n        status = true\n      } else if (transactionType === requestTypes.pegin) {\n        status = networkState.networkType === requestTypes.bitcoin\n      } else if (transactionType === requestTypes.pegout) {\n        status = networkState.networkType === requestTypes.sidechain\n      }\n      return status\n    }\n    const createasset = (params: CreateassetParams) => {\n      if (checkWalletConnection(params.onComplete, params.transactionType)) {\n        const url = `${WALLETURL}?requestType=create-asset`;\n        let childWindow = window.open(url,\"_blank\",windowFeatures);\n        setRequestType(\"create-asset\")\n        setChildWindow(childWindow)\n        setCreateAssetData(params)\n      }\n    }\n    const transferasset = (params: TransferAssetParams) => {\n      if (checkWalletConnection(params.onComplete, \"transfer\")) {\n        const url = `${WALLETURL}?requestType=transfer-asset`;\n        let childWindow = window.open(url,\"_blank\",windowFeatures);\n        setRequestType(\"transfer-asset\")\n        setChildWindow(childWindow)\n        setTransferAssetData(params)\n      }\n    }\n\n  const { children } = props\n  return (\n    <useConnector.Provider\n      value={{\n        walletState,\n        networkState,\n        connect,\n        disconnect,\n        send,\n        createasset,\n        transferasset,\n        isConnected,\n      }}\n    >\n      {children}\n    </useConnector.Provider>\n  )\n}\n","export const WALLETURL = \"chrome-extension://ajgnmjjgdpkalfgahngbddmmdaapolbh/index.html\""]}