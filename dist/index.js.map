{"version":3,"sources":["/home/bsetec/anduro-connector/anduro-wallet-connector-react/dist/index.js","../src/index.ts","../src/hooks/useConnector.tsx","../src/helpers/errorMessages.tsx","../src/helpers/handleResponse.tsx","../src/helpers/handleWalletWindow.tsx","../src/config/walletApi.ts"],"names":["__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__export","target","all","name","get","enumerable","__copyProps","to","from","except","desc","key","call","__toESM","mod","isNodeMode","__esModule","value","__toCommonJS","src_exports","UseConnectorProvider","useConnector","module","exports","import_react","require","FAIL_PROCESS","ERROR_MESSAGES","walletNotConnected","transactionTypeRequired","transactionTypeInvalid","amountRequired","nameRequired","symbolRequired","imageUrlRequired","supplyRequired","assetTypeRequired","assetTypeInvalid","assetIdRequired","receiverAddressRequired","precisionRequired","handleErrorResponse","error","status","result","handleSuccessResponse","openWalletWindow","url","window","inputWidth","inputHeight","viewportwidth","document","documentElement","clientWidth","tempW","top","outerWidth","tempH","outerHeight","tempSY","screenY","tempSX","screenX","y","x","open","WALLETURL","import_jsx_runtime","React","createContext","resolvePromise","props","useState","childWindow","setChildWindow","requestType","setRequestType","transactionData","setTransactionData","signData","setSignData","requestData","setRequestData","createAssetData","setCreateAssetData","transferAssetData","setTransferAssetData","chainId","networkType","networkState","setNetworkState","accountPublicKey","connectionState","walletState","setWalletState","signTransactionData","setSignTransactionData","useEffect","addEventListener","handleMessage","removeEventListener","event","data","type","handlewalletLoadedMessage","close","updateNetworkInformation","updateWalletInformation","sendMessageToChildWindow","siteurl","location","origin","transactionType","amount","receiverAddress","feerate","feeRate","console","log","formValues","headline","imageUrl","supply","imagebase64Data","symbol","assetType","properties","assetId","precision","message","hex","postMessage","params","connect","Promise","resolve","networkInfo","disconnect","send","validateSendTransactionType","checkWalletConnection","createasset","transferasset","sign","signTransaction","sendTransaction","signAndSendTransaction","children","jsx","Provider"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  UseConnectorProvider: () => UseConnectorProvider,\n  useConnector: () => useConnector\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/hooks/useConnector.tsx\nvar import_react = __toESM(require(\"react\"));\n\n// src/helpers/errorMessages.tsx\nvar FAIL_PROCESS = \"Can't process your request\";\nvar ERROR_MESSAGES = {\n  walletNotConnected: \"The wallet is not connected.\",\n  transactionTypeRequired: `${FAIL_PROCESS}, Transaction Type is required`,\n  transactionTypeInvalid: `${FAIL_PROCESS}, Invalid transaction type`,\n  amountRequired: `${FAIL_PROCESS}, Amount is required`,\n  nameRequired: `${FAIL_PROCESS}, Name is required`,\n  symbolRequired: `${FAIL_PROCESS}, Symbol is required`,\n  imageUrlRequired: `${FAIL_PROCESS}, Image Url is required`,\n  supplyRequired: `${FAIL_PROCESS}, Supply is required`,\n  assetTypeRequired: `${FAIL_PROCESS}, Asset Type is required`,\n  assetTypeInvalid: `${FAIL_PROCESS}, Invalid Asset Type`,\n  assetIdRequired: `${FAIL_PROCESS}, Asset Id is required`,\n  receiverAddressRequired: `${FAIL_PROCESS}, Receiver Address is required`,\n  precisionRequired: `${FAIL_PROCESS}, Precision is required.`\n};\n\n// src/helpers/handleResponse.tsx\nvar handleErrorResponse = (error = null) => {\n  return { status: false, result: null, error };\n};\nvar handleSuccessResponse = (result = null) => {\n  return { status: true, result: result.result ? result.result : result, error: null };\n};\n\n// src/helpers/handleWalletWindow.tsx\nvar openWalletWindow = (url) => {\n  var inputWidth = 370;\n  var inputHeight = 550;\n  const viewportwidth = document.documentElement.clientWidth;\n  const tempW = window.top?.outerWidth;\n  const tempH = window.top?.outerHeight;\n  const tempSY = window.top?.screenY;\n  const tempSX = window.top?.screenX;\n  var y = tempH / 2 + tempSY - inputHeight / 2;\n  var x = tempW / 2 + tempSX - inputWidth / 2;\n  if (viewportwidth > 800) {\n    x = viewportwidth - 300;\n    y = 0;\n  }\n  return window.open(\n    url,\n    \"_blank\",\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${inputWidth}, height=${inputHeight}, right=0, top=${y}, left=${x}`\n  );\n};\n\n// src/config/walletApi.ts\nvar WALLETURL = \"http://localhost:3001/\";\n\n// src/hooks/useConnector.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar useConnector = import_react.default.createContext(null);\nvar resolvePromise = null;\nvar UseConnectorProvider = (props) => {\n  const [childWindow, setChildWindow] = (0, import_react.useState)(null);\n  const [requestType, setRequestType] = (0, import_react.useState)();\n  const [transactionData, setTransactionData] = (0, import_react.useState)({});\n  const [signData, setSignData] = (0, import_react.useState)({});\n  const [requestData, setRequestData] = import_react.default.useState(null);\n  const [createAssetData, setCreateAssetData] = import_react.default.useState({});\n  const [transferAssetData, setTransferAssetData] = import_react.default.useState({});\n  const [networkState, setNetworkState] = import_react.default.useState({\n    chainId: null,\n    networkType: \"\"\n  });\n  const [walletState, setWalletState] = import_react.default.useState({\n    accountPublicKey: \"\",\n    connectionState: \"disconnected\"\n  });\n  const [signTransactionData, setSignTransactionData] = (0, import_react.useState)();\n  (0, import_react.useEffect)(() => {\n    if (childWindow != null) {\n      window.addEventListener(\"message\", handleMessage);\n      return () => {\n        window.removeEventListener(\"message\", handleMessage);\n      };\n    }\n  }, [childWindow]);\n  const handleMessage = (event) => {\n    if (!event.data.type) return false;\n    if (event.data.type == \"webpackOk\") return false;\n    if (event.data.type === \"wallet-loaded\" /* walletLoaded */) return handlewalletLoadedMessage();\n    if (childWindow) childWindow.close();\n    if (!event.data.status) {\n      if (resolvePromise) {\n        return resolvePromise(handleErrorResponse(event.data.error ? event.data.error : event.data));\n      } else {\n        return handleErrorResponse(event.data.error ? event.data.error : event.data);\n      }\n    }\n    switch (event.data.type) {\n      case \"connection-response\" /* connectionResponse */:\n        updateNetworkInformation(event.data.result);\n        updateWalletInformation(\"connected\", event.data.result.accountPublicKey);\n        resolvePromise(handleSuccessResponse(event.data));\n        break;\n      case \"account-not-created\" /* accountNotCreated */:\n        if (resolvePromise) resolvePromise(handleErrorResponse(event.data));\n        break;\n      case \"networkinfo-response\" /* networkinfoResponse */:\n        updateNetworkInformation(event.data.result);\n        updateWalletInformation(\"conneted\", event.data.result.accountPublicKey);\n        break;\n      case \"disconnect-response\" /* disconnectResponse */:\n        updateNetworkInformation({ chainId: null, networkType: \"\" });\n        updateWalletInformation(\"disconnected\", \"\");\n        if (resolvePromise) resolvePromise(handleSuccessResponse(event.data));\n        break;\n      default:\n        if (resolvePromise) resolvePromise(handleSuccessResponse(event.data));\n        break;\n    }\n  };\n  const handlewalletLoadedMessage = () => {\n    if (requestType === \"connect\" /* connect */ || requestType === \"disconnect\" /* disconnected */) {\n      sendMessageToChildWindow({\n        requestType,\n        siteurl: window.location.origin,\n        chainId: requestData ? requestData.chainId : 0\n      });\n    } else if (requestType === \"networkinfo\" /* networkinfo */) {\n      sendMessageToChildWindow({\n        requestType,\n        siteurl: window.location.origin\n      });\n    } else if (requestType === \"send\" /* send */) {\n      sendMessageToChildWindow({\n        requestType,\n        transactionType: transactionData.transactionType,\n        amount: transactionData.amount,\n        receiverAddress: transactionData.receiverAddress,\n        feerate: transactionData.feeRate,\n        chainId: networkState.chainId\n      });\n    } else if (requestType === \"create-asset\" /* createAsset */) {\n      console.log(\"createAssetData\", createAssetData);\n      const formValues = {\n        headline: createAssetData.name,\n        imageUrl: createAssetData.imageUrl,\n        supply: createAssetData.supply,\n        imagebase64Data: { data: \"\", type: \"\" },\n        symbol: createAssetData.symbol\n      };\n      sendMessageToChildWindow({\n        requestType,\n        transactionType: createAssetData.transactionType,\n        formValues,\n        assetType: createAssetData.assetType,\n        properties: createAssetData.properties,\n        chainId: networkState.chainId,\n        supply: createAssetData.supply,\n        receiverAddress: createAssetData.receiverAddress,\n        assetId: createAssetData.assetId,\n        precision: createAssetData.precision\n      });\n    } else if (requestType === \"transfer-asset\" /* transferAsset */) {\n      sendMessageToChildWindow({\n        requestType,\n        chainId: networkState.chainId,\n        supply: transferAssetData.supply,\n        receiverAddress: transferAssetData.receiverAddress,\n        assetId: transferAssetData.assetId\n      });\n    } else if (requestType === \"sign\" /* sign */) {\n      sendMessageToChildWindow({\n        requestType,\n        chainId: networkState.chainId,\n        message: signData.message\n      });\n    } else if (requestType === \"sign-transaction\" /* signTransaction */ || requestType === \"send-transaction\" /* sendTransaction */ || requestType === \"sign-and-send-transaction\" /* signAndSendTransaction */) {\n      sendMessageToChildWindow({\n        requestType,\n        chainId: networkState.chainId,\n        hex: signTransactionData?.hex\n      });\n    }\n  };\n  const sendMessageToChildWindow = (data) => {\n    childWindow.postMessage(data, \"*\");\n  };\n  const updateNetworkInformation = (params) => {\n    setNetworkState({\n      chainId: params.chainId,\n      networkType: params.networkType\n    });\n  };\n  const updateWalletInformation = (connectionState, accountPublicKey) => {\n    setWalletState({\n      accountPublicKey,\n      connectionState\n    });\n  };\n  const connect = async (params) => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${\"connect\" /* connect */}`;\n      let childWindow2 = openWalletWindow(url);\n      setRequestType(\"connect\" /* connect */);\n      setChildWindow(childWindow2);\n      setRequestData({\n        chainId: params.chainId\n      });\n      updateWalletInformation(\"connecting\", \"\");\n      resolvePromise = resolve;\n    });\n  };\n  const networkInfo = async () => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${\"networkinfo\" /* networkinfo */}`;\n      let childWindow2 = openWalletWindow(url);\n      setRequestType(\"networkinfo\" /* networkinfo */);\n      setChildWindow(childWindow2);\n      resolvePromise = resolve;\n    });\n  };\n  const disconnect = () => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${\"disconnect\" /* disconnected */}`;\n      let childWindow2 = openWalletWindow(url);\n      setRequestType(\"disconnect\" /* disconnected */);\n      setChildWindow(childWindow2);\n      updateWalletInformation(\"disconnecting\", \"\");\n      resolvePromise = resolve;\n    });\n  };\n  const send = (params) => {\n    if (!params.transactionType) return handleErrorResponse(ERROR_MESSAGES.transactionTypeRequired);\n    if (!params.amount) return handleErrorResponse(ERROR_MESSAGES.amountRequired);\n    if (!validateSendTransactionType(params.transactionType))\n      return handleErrorResponse(ERROR_MESSAGES.transactionTypeInvalid);\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\") && params.transactionType) {\n        const url = `${WALLETURL}?requestType=${\"send\" /* send */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"send\" /* send */);\n        setChildWindow(childWindow2);\n        setTransactionData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const checkWalletConnection = (resolve, transactionType) => {\n    let status = true;\n    let error = null;\n    if (networkState.chainId === null || networkState.networkType === \"\") {\n      status = false;\n      error = ERROR_MESSAGES.walletNotConnected;\n    } else if (transactionType && networkState.networkType === \"bitcoin\" /* bitcoin */) {\n      status = false;\n      error = ERROR_MESSAGES.transactionTypeInvalid;\n    }\n    if (!status) {\n      resolve({\n        status,\n        result: null,\n        error\n      });\n    }\n    return status;\n  };\n  const validateSendTransactionType = (transactionType) => {\n    let status = false;\n    if (transactionType === \"normal\" /* normal */) {\n      status = true;\n    } else if (transactionType === \"pegin\" /* pegin */) {\n      status = networkState.networkType === \"bitcoin\" /* bitcoin */;\n    } else if (transactionType === \"pegout\" /* pegout */) {\n      status = networkState.networkType === \"sidechain\" /* sidechain */;\n    }\n    return status;\n  };\n  const createasset = (params) => {\n    if (!params.transactionType) return handleErrorResponse(ERROR_MESSAGES.transactionTypeRequired);\n    if (params.transactionType === \"create\" && !params.name)\n      return handleErrorResponse(ERROR_MESSAGES.nameRequired);\n    if (params.transactionType === \"create\" && !params.symbol)\n      return handleErrorResponse(ERROR_MESSAGES.symbolRequired);\n    if (params.transactionType === \"create\" && !params.imageUrl)\n      return handleErrorResponse(ERROR_MESSAGES.imageUrlRequired);\n    if (!params.supply) return handleErrorResponse(ERROR_MESSAGES.supplyRequired);\n    if (params.assetType === 0 && params.transactionType === \"create\" && !params.precision)\n      return handleErrorResponse(ERROR_MESSAGES.precisionRequired);\n    if (params.assetType === void 0 || params.assetType === null)\n      return handleErrorResponse(ERROR_MESSAGES.assetTypeRequired);\n    return new Promise((resolve) => {\n      if (params.transactionType && checkWalletConnection(resolve, params.transactionType)) {\n        const url = `${WALLETURL}?requestType=${\"create-asset\" /* createAsset */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"create-asset\" /* createAsset */);\n        setChildWindow(childWindow2);\n        setCreateAssetData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const transferasset = (params) => {\n    if (!params.assetId) return handleErrorResponse(ERROR_MESSAGES.assetIdRequired);\n    if (!params.receiverAddress) return handleErrorResponse(ERROR_MESSAGES.receiverAddressRequired);\n    if (!params.supply) return handleErrorResponse(ERROR_MESSAGES.supplyRequired);\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"transfer\")) {\n        const url = `${WALLETURL}?requestType=${\"transfer-asset\" /* transferAsset */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"transfer-asset\" /* transferAsset */);\n        setChildWindow(childWindow2);\n        setTransferAssetData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const sign = (params) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${\"sign\" /* sign */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"sign\" /* sign */);\n        setChildWindow(childWindow2);\n        setSignData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const signTransaction = (params) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${\"sign-transaction\" /* signTransaction */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"sign-transaction\" /* signTransaction */);\n        setChildWindow(childWindow2);\n        setSignTransactionData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const sendTransaction = (params) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${\"send-transaction\" /* sendTransaction */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"send-transaction\" /* sendTransaction */);\n        setChildWindow(childWindow2);\n        setSignTransactionData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const signAndSendTransaction = (params) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${\"sign-and-send-transaction\" /* signAndSendTransaction */}`;\n        let childWindow2 = openWalletWindow(url);\n        setRequestType(\"sign-and-send-transaction\" /* signAndSendTransaction */);\n        setChildWindow(childWindow2);\n        setSignTransactionData(params);\n        resolvePromise = resolve;\n      }\n    });\n  };\n  const { children } = props;\n  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\n    useConnector.Provider,\n    {\n      value: {\n        walletState,\n        networkState,\n        connect,\n        networkInfo,\n        disconnect,\n        send,\n        createasset,\n        transferasset,\n        sign,\n        signTransaction,\n        sendTransaction,\n        signAndSendTransaction\n      },\n      children\n    }\n  );\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  UseConnectorProvider,\n  useConnector\n});\n","/*\nProject : Anduro Wallet Connector\nFileName : index.tsx\nAuthor : \nFile Created : 04/03/2024\nCopyRights : \nPurpose : This is the file that is used to export wallet connector provider .\n*/\n\nexport { useConnector, UseConnectorProvider } from \"./hooks/useConnector\"\n","/*\nProject : Anduro Wallet Connector\nFileName : useConnector.tsx\nAuthor : \nFile Created : 04/03/2024\nCopyRights : \nPurpose : This is the file that is used to handle connect , disconnect and manage anduro wallet.\n*/\nimport React, { useState, useEffect } from \"react\"\nimport { ERROR_MESSAGES } from \"../helpers/errorMessages\"\nimport { handleErrorResponse, handleSuccessResponse } from \"../helpers/handleResponse\"\nimport { openWalletWindow } from \"../helpers/handleWalletWindow\"\nimport { WALLETURL } from \"../config/walletApi\"\n\ninterface WalletState {\n  accountPublicKey: string\n  connectionState: string\n}\ninterface NetworkState {\n  chainId: any\n  networkType: string\n}\ninterface connectParams {\n  chainId: number\n}\ninterface SignParams {\n  message?: string\n}\ninterface createTransactionParams {\n  transactionType?: string\n  amount?: number\n  receiverAddress?: string | undefined\n  feeRate?: number | undefined\n}\ninterface PropertiesType {\n  type: string\n  value: string\n}\ninterface CreateassetParams {\n  name?: string\n  symbol?: string\n  imageUrl?: string\n  supply?: number\n  properties?: PropertiesType[]\n  assetType?: number\n  transactionType?: string\n  receiverAddress?: string | undefined\n  assetId?: number | undefined\n  precision?: number | undefined\n}\ninterface TransferAssetParams {\n  assetId?: number\n  receiverAddress?: string\n  supply?: number\n}\ninterface SignTransactionParams {\n  hex: string\n}\nenum RequestTypes {\n  connect = \"connect\",\n  disconnected = \"disconnect\",\n  accountNotCreated = \"account-not-created\",\n  walletLoaded = \"wallet-loaded\",\n  networkinfo = \"networkinfo\",\n  send = \"send\",\n  createAsset = \"create-asset\",\n  transferAsset = \"transfer-asset\",\n  sign = \"sign\",\n  signTransaction = \"sign-transaction\",\n  sendTransaction = \"send-transaction\",\n  signAndSendTransaction = \"sign-and-send-transaction\",\n}\n\nenum ResponseTypes {\n  connectionResponse = \"connection-response\",\n  networkinfoResponse = \"networkinfo-response\",\n  sendResponse = \"send-response\",\n  createAssetResponse = \"create-asset-response\",\n  disconnectResponse = \"disconnect-response\",\n}\n\nenum TransactionTypes {\n  bitcoin = \"bitcoin\",\n  sidechain = \"sidechain\",\n  normal = \"normal\",\n  pegin = \"pegin\",\n  pegout = \"pegout\",\n}\n\ntype UseConnectorContextContextType = {\n  networkState: NetworkState\n  walletState: WalletState\n  connect: (params: connectParams) => object\n  networkInfo: () => object\n  sign: (params: SignParams) => object\n  transferasset: (params: TransferAssetParams) => object\n  createasset: (params: CreateassetParams) => object\n  send: (params: createTransactionParams) => object\n  disconnect: () => object\n  signTransaction: (params: SignTransactionParams) => object\n  sendTransaction: (params: SignTransactionParams) => object\n  signAndSendTransaction: (params: SignTransactionParams) => object\n}\nexport const useConnector = React.createContext<UseConnectorContextContextType | null>(null)\nlet resolvePromise: any = null\nexport const UseConnectorProvider = (props: any) => {\n  const [childWindow, setChildWindow] = useState<any>(null)\n  const [requestType, setRequestType] = useState<RequestTypes>()\n  const [transactionData, setTransactionData] = useState<createTransactionParams>({})\n  const [signData, setSignData] = useState<SignParams>({})\n  const [requestData, setRequestData] = React.useState<any>(null)\n  const [createAssetData, setCreateAssetData] = React.useState<CreateassetParams>({})\n  const [transferAssetData, setTransferAssetData] = React.useState<TransferAssetParams>({})\n  const [networkState, setNetworkState] = React.useState<NetworkState>({\n    chainId: null,\n    networkType: \"\",\n  })\n  const [walletState, setWalletState] = React.useState<WalletState>({\n    accountPublicKey: \"\",\n    connectionState: \"disconnected\",\n  })\n  const [signTransactionData, setSignTransactionData] = useState<SignTransactionParams>()\n\n  useEffect(() => {\n    if (childWindow != null) {\n      window.addEventListener(\"message\", handleMessage)\n      return () => {\n        window.removeEventListener(\"message\", handleMessage)\n      }\n    }\n  }, [childWindow])\n\n  /**\n   * The following function used for listening messages from anduro wallet extension\n   *\n   * @param event Event message\n   *\n   */\n  const handleMessage = (event: any) => {\n    if (!event.data.type) return false\n\n    if (event.data.type == \"webpackOk\") return false\n\n    if (event.data.type === RequestTypes.walletLoaded) return handlewalletLoadedMessage()\n\n    if (childWindow) childWindow.close()\n\n    if (!event.data.status) {\n      if (resolvePromise) {\n        return resolvePromise(handleErrorResponse(event.data.error ? event.data.error : event.data))\n      } else {\n        return handleErrorResponse(event.data.error ? event.data.error : event.data)\n      }\n    }\n\n    switch (event.data.type) {\n      case ResponseTypes.connectionResponse:\n        updateNetworkInformation(event.data.result)\n        updateWalletInformation(\"connected\", event.data.result.accountPublicKey)\n        resolvePromise(handleSuccessResponse(event.data))\n        break\n      case RequestTypes.accountNotCreated:\n        if (resolvePromise) resolvePromise(handleErrorResponse(event.data))\n        break\n      case ResponseTypes.networkinfoResponse:\n        updateNetworkInformation(event.data.result)\n        updateWalletInformation(\"conneted\", event.data.result.accountPublicKey)\n        break\n      case ResponseTypes.disconnectResponse:\n        updateNetworkInformation({ chainId: null, networkType: \"\" })\n        updateWalletInformation(\"disconnected\", \"\")\n        if (resolvePromise) resolvePromise(handleSuccessResponse(event.data))\n        break\n      default:\n        if (resolvePromise) resolvePromise(handleSuccessResponse(event.data))\n        break\n    }\n  }\n  /**\n   * The following function used for listening messages from wallet and once wallet loaded, send message to child window\n   */\n  const handlewalletLoadedMessage = () => {\n    if (requestType === RequestTypes.connect || requestType === RequestTypes.disconnected) {\n      sendMessageToChildWindow({\n        requestType,\n        siteurl: window.location.origin,\n        chainId: requestData ? requestData.chainId : 0,\n      })\n    } else if (requestType === RequestTypes.networkinfo) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        siteurl: window.location.origin,\n      })\n    } else if (requestType === RequestTypes.send) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        transactionType: transactionData.transactionType,\n        amount: transactionData.amount,\n        receiverAddress: transactionData.receiverAddress,\n        feerate: transactionData.feeRate,\n        chainId: networkState.chainId,\n      })\n    } else if (requestType === RequestTypes.createAsset) {\n      console.log(\"createAssetData\", createAssetData)\n      const formValues = {\n        headline: createAssetData.name,\n        imageUrl: createAssetData.imageUrl,\n        supply: createAssetData.supply,\n        imagebase64Data: { data: \"\", type: \"\" },\n        symbol: createAssetData.symbol,\n      }\n      sendMessageToChildWindow({\n        requestType: requestType,\n        transactionType: createAssetData.transactionType,\n        formValues,\n        assetType: createAssetData.assetType,\n        properties: createAssetData.properties,\n        chainId: networkState.chainId,\n        supply: createAssetData.supply,\n        receiverAddress: createAssetData.receiverAddress,\n        assetId: createAssetData.assetId,\n        precision: createAssetData.precision,\n      })\n    } else if (requestType === RequestTypes.transferAsset) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        chainId: networkState.chainId,\n        supply: transferAssetData.supply,\n        receiverAddress: transferAssetData.receiverAddress,\n        assetId: transferAssetData.assetId,\n      })\n    } else if (requestType === RequestTypes.sign) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        chainId: networkState.chainId,\n        message: signData.message,\n      })\n    } else if (\n      requestType === RequestTypes.signTransaction ||\n      requestType === RequestTypes.sendTransaction ||\n      requestType === RequestTypes.signAndSendTransaction\n    ) {\n      sendMessageToChildWindow({\n        requestType: requestType,\n        chainId: networkState.chainId,\n        hex: signTransactionData?.hex,\n      })\n    }\n  }\n  /**\n   * The following function used for sending messages to anduro wallet extension\n   *\n   * @param data Data to send to the wallet\n   *\n   */\n  const sendMessageToChildWindow = (data: any) => {\n    childWindow.postMessage(data, \"*\")\n  }\n\n  /**\n   * The following function used for setting network information in library\n   *\n   * @param params Event message\n   *\n   */\n  const updateNetworkInformation = (params: any) => {\n    setNetworkState({\n      chainId: params.chainId,\n      networkType: params.networkType,\n    })\n  }\n\n  /**\n   * The following function used for setting wallet account public key , connection state information in library\n   *\n   * @param connectionState The connection state of the Anduro wallet\n   * @param accountPublicKey The Anduro wallet account public key\n   *\n   */\n  const updateWalletInformation = (connectionState: string, accountPublicKey: string) => {\n    setWalletState({\n      accountPublicKey: accountPublicKey,\n      connectionState: connectionState,\n    })\n  }\n\n  /**\n   * The following function used for connecting anduro wallet extension\n   *\n   * @param chainId Chain ID for connecting the Anduro wallet\n   *\n   */\n  const connect = async (params: connectParams) => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${RequestTypes.connect}`\n      let childWindow = openWalletWindow(url)\n      setRequestType(RequestTypes.connect)\n      setChildWindow(childWindow)\n      setRequestData({\n        chainId: params.chainId,\n      })\n      updateWalletInformation(\"connecting\", \"\")\n      resolvePromise = resolve\n    })\n  }\n\n  /**\n   * The following function used for initialize wallet and get network info\n   */\n  const networkInfo = async () => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${RequestTypes.networkinfo}`\n      let childWindow = openWalletWindow(url)\n      setRequestType(RequestTypes.networkinfo)\n      setChildWindow(childWindow)\n      resolvePromise = resolve\n    })\n  }\n  /**\n   * The following function used for disconnecting anduro wallet extension\n   */\n  const disconnect = () => {\n    return new Promise((resolve) => {\n      const url = `${WALLETURL}?requestType=${RequestTypes.disconnected}`\n      let childWindow = openWalletWindow(url)\n      setRequestType(RequestTypes.disconnected)\n      setChildWindow(childWindow)\n      updateWalletInformation(\"disconnecting\", \"\")\n      resolvePromise = resolve\n    })\n  }\n\n  /**\n   * The following function used for send BTC / CBTC to receiver and\n   * convert BTC to CBTC / CBTC to BTC in anduro wallet\n   *\n   * @param transactionType transactionType:\n   *                          1. normal - Send BTC / CBTC OR CBTC / BTC\n   *                          2. pegin - Convert BTC to CBTC\n   *                          3. pegout - Convert CBTC to BTC\n   * @param amount transaction amount\n   * @param receiverAddress (Optional) Receiver address ( coordinate address / bitcoin address )\n   * @param feeRate (Optional) Fee rate per virtual byte\n   *\n   */\n  const send = (params: createTransactionParams) => {\n    if (!params.transactionType) return handleErrorResponse(ERROR_MESSAGES.transactionTypeRequired)\n\n    if (!params.amount) return handleErrorResponse(ERROR_MESSAGES.amountRequired)\n\n    if (!validateSendTransactionType(params.transactionType))\n      return handleErrorResponse(ERROR_MESSAGES.transactionTypeInvalid)\n\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\") && params.transactionType) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.send}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.send)\n        setChildWindow(childWindow)\n        setTransactionData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for checking anduro wallet is in connected state or not\n   *\n   * @param onError\n   * @param transactionType\n   *\n   */\n  const checkWalletConnection = (resolve: any, transactionType: string) => {\n    let status: boolean = true\n    let error: any = null\n    if (networkState.chainId === null || networkState.networkType === \"\") {\n      status = false\n      error = ERROR_MESSAGES.walletNotConnected\n    } else if (transactionType && networkState.networkType === TransactionTypes.bitcoin) {\n      status = false\n      error = ERROR_MESSAGES.transactionTypeInvalid\n    }\n    if (!status) {\n      resolve({\n        status: status,\n        result: null,\n        error,\n      })\n    }\n    return status\n  }\n\n  /**\n   * The following function is used to validate transaction types\n   *\n   * @param transactionType\n   *\n   */\n  const validateSendTransactionType = (transactionType: string) => {\n    let status: boolean = false\n    if (transactionType === TransactionTypes.normal) {\n      status = true\n    } else if (transactionType === TransactionTypes.pegin) {\n      status = networkState.networkType === TransactionTypes.bitcoin\n    } else if (transactionType === TransactionTypes.pegout) {\n      status = networkState.networkType === TransactionTypes.sidechain\n    }\n    return status\n  }\n\n  /**\n   * The following function used for creating asset in anduro wallet\n   *\n   * @param name The asset's name\n   * @param symbol The asset's symbol\n   * @param imageUrl The asset's image URL\n   * @param supply The asset's total supply\n   * @param properties The asset's trait data\n   * @param assetType assetType :\n   *                    1. 0 for creating tokens.\n   *                    2. 1 for creating NFT.\n   * @param transactionType transactionType: create OR mint\n   * @param receiverAddress (Optional) Required for mint transactions\n   * @param assetId (Optional) Required for mint transactions\n   *\n   */\n  const createasset = (params: CreateassetParams) => {\n    if (!params.transactionType) return handleErrorResponse(ERROR_MESSAGES.transactionTypeRequired)\n\n    if (params.transactionType === \"create\" && !params.name)\n      return handleErrorResponse(ERROR_MESSAGES.nameRequired)\n\n    if (params.transactionType === \"create\" && !params.symbol)\n      return handleErrorResponse(ERROR_MESSAGES.symbolRequired)\n\n    if (params.transactionType === \"create\" && !params.imageUrl)\n      return handleErrorResponse(ERROR_MESSAGES.imageUrlRequired)\n\n    if (!params.supply) return handleErrorResponse(ERROR_MESSAGES.supplyRequired)\n\n    if (params.assetType === 0 && params.transactionType === \"create\" && !params.precision)\n      return handleErrorResponse(ERROR_MESSAGES.precisionRequired)\n\n    if (params.assetType === undefined || params.assetType === null)\n      return handleErrorResponse(ERROR_MESSAGES.assetTypeRequired)\n\n    return new Promise((resolve) => {\n      if (params.transactionType && checkWalletConnection(resolve, params.transactionType)) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.createAsset}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.createAsset)\n        setChildWindow(childWindow)\n        setCreateAssetData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for transfer asset / mint  in anduro wallet\n   *\n   * @param assetId The asset ID\n   * @param receiverAddress Receiver Address\n   * @param supply supply to transfer\n   *\n   */\n  const transferasset = (params: TransferAssetParams) => {\n    if (!params.assetId) return handleErrorResponse(ERROR_MESSAGES.assetIdRequired)\n\n    if (!params.receiverAddress) return handleErrorResponse(ERROR_MESSAGES.receiverAddressRequired)\n\n    if (!params.supply) return handleErrorResponse(ERROR_MESSAGES.supplyRequired)\n\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"transfer\")) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.transferAsset}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.transferAsset)\n        setChildWindow(childWindow)\n        setTransferAssetData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  /**\n   * The following function used for sign process\n   *\n   * @param message The sign message\n   *\n   */\n  const sign = (params: SignParams) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.sign}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.sign)\n        setChildWindow(childWindow)\n        setSignData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n  /**\n   * The following function used for sign process\n   *\n   * @param hex The raw transaction hex\n   *\n   */\n  const signTransaction = (params: SignTransactionParams) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.signTransaction}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.signTransaction)\n        setChildWindow(childWindow)\n        setSignTransactionData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n  /**\n   * The following function used for sign process\n   *\n   * @param hex The signed transaction hex\n   *\n   */\n  const sendTransaction = (params: SignTransactionParams) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.sendTransaction}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.sendTransaction)\n        setChildWindow(childWindow)\n        setSignTransactionData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n  /**\n   * The following function used for sign process\n   *\n   * @param hex The signed transaction hex\n   *\n   */\n  const signAndSendTransaction = (params: SignTransactionParams) => {\n    return new Promise((resolve) => {\n      if (checkWalletConnection(resolve, \"\")) {\n        const url = `${WALLETURL}?requestType=${RequestTypes.signAndSendTransaction}`\n        let childWindow = openWalletWindow(url)\n        setRequestType(RequestTypes.signAndSendTransaction)\n        setChildWindow(childWindow)\n        setSignTransactionData(params)\n        resolvePromise = resolve\n      }\n    })\n  }\n\n  const { children } = props\n  return (\n    <useConnector.Provider\n      value={{\n        walletState,\n        networkState,\n        connect,\n        networkInfo,\n        disconnect,\n        send,\n        createasset,\n        transferasset,\n        sign,\n        signTransaction,\n        sendTransaction,\n        signAndSendTransaction,\n      }}\n    >\n      {children}\n    </useConnector.Provider>\n  )\n}\n","/*\nProject : Anduro Wallet Connector\nFileName : handleResponse.tsx\nAuthor : \nFile Created : 13/04/2024\nCopyRights : \nPurpose : This is the file that is used to store error message verbiage\n*/\n\nconst FAIL_PROCESS = \"Can't process your request\"\nexport const ERROR_MESSAGES = {\n  walletNotConnected: \"The wallet is not connected.\",\n  transactionTypeRequired: `${FAIL_PROCESS}, Transaction Type is required`,\n  transactionTypeInvalid: `${FAIL_PROCESS}, Invalid transaction type`,\n  amountRequired: `${FAIL_PROCESS}, Amount is required`,\n  nameRequired: `${FAIL_PROCESS}, Name is required`,\n  symbolRequired: `${FAIL_PROCESS}, Symbol is required`,\n  imageUrlRequired: `${FAIL_PROCESS}, Image Url is required`,\n  supplyRequired: `${FAIL_PROCESS}, Supply is required`,\n  assetTypeRequired: `${FAIL_PROCESS}, Asset Type is required`,\n  assetTypeInvalid: `${FAIL_PROCESS}, Invalid Asset Type`,\n  assetIdRequired: `${FAIL_PROCESS}, Asset Id is required`,\n  receiverAddressRequired: `${FAIL_PROCESS}, Receiver Address is required`,\n  precisionRequired: `${FAIL_PROCESS}, Precision is required.`,\n}\n","/*\nProject : Anduro Wallet Connector\nFileName : handleResponse.tsx\nAuthor : \nFile Created : 13/04/2024\nCopyRights : \nPurpose : This is the file that is used to handle response structure.\n*/\n\n/**\n * The following function used to handle error response structure\n * @param error\n */\nexport const handleErrorResponse = (error: any = null) => {\n  return { status: false, result: null, error }\n}\n/**\n * The following function used to handle success response structure\n * @param result\n */\nexport const handleSuccessResponse = (result: any = null) => {\n  return { status: true, result: result.result ? result.result : result, error: null }\n}\n","/*\nProject : Anduro Wallet Connector\nFileName : handleWalletWindow.tsx\nAuthor : \nFile Created : 13/04/2024\nCopyRights : \nPurpose : This is the file that is used to handle wallet window.\n*/\n/**\n * The following function used to handle wallet window opening part\n * @param url The URL of the page to open.\n * @returns A reference to the opened window\n */\nexport const openWalletWindow = (url: any) => {\n  var inputWidth = 370\n  var inputHeight = 550\n  const viewportwidth = document.documentElement.clientWidth\n  const tempW: any = window.top?.outerWidth\n  const tempH: any = window.top?.outerHeight\n  const tempSY: any = window.top?.screenY\n  const tempSX: any = window.top?.screenX\n  var y = tempH / 2 + tempSY - inputHeight / 2\n  var x = tempW / 2 + tempSX - inputWidth / 2\n  if (viewportwidth > 800) {\n    x = viewportwidth - 300\n    y = 0\n  }\n  return window.open(\n    url,\n    \"_blank\",\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${inputWidth}, height=${inputHeight}, right=0, top=${y}, left=${x}`,\n  )\n}\n","export const WALLETURL = \"http://localhost:3001/\"\n"]}
