
{"version":3,"sources":["../src/index.ts","../src/hooks/useConnector.ts"],"names":["React","childWindow"],"mappings":"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","sourcesContent":["export { useConnector } from \"./hooks/useConnector\"; ","import React, { useEffect, useState } from 'react';\nimport { EventEmitter } from \"events\";\nimport {waitFor} from 'wait-for-event';\n\n\ntype Props = {\n  walletUrl: string;\n};\ninterface connectParams {\n  chainId: number;\n  onComplete: any;\n};\ninterface createTransactionParams {\n  transactionType: string;\n  amount: number;\n  receiverAddress?: string | undefined;\n  feeRate?: number | undefined;\n  onComplete: any;\n};\ninterface NetworkInfo {\n  chainId: any; // Chain ID\n  networkType: string; // Chain type (bitcoin OR sidechain)\n};\ninterface PropertiesType {\n  type: string;\n  value: string;\n};\ninterface CreateassetParams {\n  name: string;\n  symbol: string;\n  imageUrl: string;\n  supply: number;\n  properties: PropertiesType[];\n  assetType: number;\n  transactionType: string;\n  receiverAddress: string;\n  onComplete: any;\n  assetId?: number;\n}\ninterface TransferAssetParams {\n  assetId: number;\n  receiverAddress: string;\n  supply: number;\n  onComplete: any;\n}\ninterface WalletInfo {\n  accountPublicKey: string; // wallet account public key\n  connectionState: string; // connection state\n};\nconst walletInformation: WalletInfo = {\n    accountPublicKey: \"\",\n    connectionState: \"disconnected\",\n}\n\nconst networkInformation: NetworkInfo = {\n  chainId: null,\n  networkType: \"\",\n}\nexport const useConnector = (props: Props) => {\n  const walletEvent = new EventEmitter()\n  const [childWindow, setChildWindow] = useState<any>(null);\n  const [requestType, setRequestType] = useState(\"\");\n  const [transactionData, setTransactionData] = useState<createTransactionParams>({\n    transactionType: \"\",\n    amount: 0,\n    receiverAddress: \"\",\n    feeRate: 1,\n    onComplete: null\n  });\n  const [requestData, setRequestData] = React.useState<any>(null);\n  const [createAssetData, setCreateAssetData] = React.useState<CreateassetParams>({\n    name: \"\",\n    symbol: \"\",\n    imageUrl: \"\",\n    supply: 0,\n    properties: [{type: \"\", value: \"\",}],\n    assetType: 0,\n    transactionType: \"\",\n    receiverAddress: \"\",\n    onComplete: null,\n  });\n  const [transferAssetData, setTransferAssetData] = React.useState<TransferAssetParams>({\n    assetId: 0,\n    receiverAddress: \"\",\n    supply: 0,\n    onComplete: null,\n  });\n  const windowFeatures = \"left=1000,top=100,width=370,height=550,fullscreen=yes,toolbar=no,menubar=no,scrollbars=no,resizable=no,location=no,directories=no, status=no, titlebar=no\";\n  \n  useEffect(() => {\n    if (networkInformation.chainId === null && childWindow === null) {\n      const url = `${props.walletUrl}?requestType=networkinfo`;\n      let targetWindow: any = window.open(url,\"_blank\",windowFeatures);\n      setChildWindow(targetWindow)\n      setRequestType(\"networkinfo\")\n    }\n  }, [networkInformation]);\n  \n  useEffect(() => {\n    if (childWindow != null) {\n      window.addEventListener(\"close\", (event) => {\n        alert(\"Window closed\")\n      });\n      window.addEventListener('message', handleMessage);\n      return () => {\n        window.removeEventListener('message', handleMessage);\n      };\n    }\n  }, [childWindow]);\n\n\n  const handleMessage = (event: any) => {\n    console.log(\"Message Received\", event.data)\n    if (event.data.type === \"connection-response\") {\n      if (event.data.status) {\n        childWindow.close();\n        setNetworkInformation(event.data.result)\n        requestData.onComplete(event.data);\n        console.log(\"test22222\")\n        process.nextTick(() => {\n          walletEvent.emit(\"connectionresponse\", event.data);   \n        });\n      } else {\n        requestData.onComplete(event.data)\n      }\n    } else if (event.data.type === \"account-not-created\") {\n      childWindow.close()\n      requestData.onComplete(event.data)\n    } else if (event.data.type === \"wallet-loaded\") {\n      if (event.data.status) {\n        if (requestType === \"connect\" || requestType === \"disconnect\") {\n          sendMessageToChildWindow({requestType, siteurl: window.location.origin, chainId: requestData.chainId});\n          console.log(\"test1\")\n          walletEvent.emit(\"connectionresponse\", event.data);   \n          process.nextTick(() => {\n            walletEvent.emit(\"connectionresponse\", event.data);   \n          });\n        } else if (requestType === \"networkinfo\") {\n          sendMessageToChildWindow({requestType: requestType, siteurl: window.location.origin})\n        } else if (requestType === \"send\") {\n          sendMessageToChildWindow({requestType: requestType, transactionType: transactionData.transactionType, amount: transactionData.amount, receiverAddress: transactionData.receiverAddress, feerate: transactionData.feeRate, chainId: networkInformation.chainId })\n        } else if (requestType === \"create-asset\") {\n          const formValues = {\n            headline: createAssetData.name,\n            imageUrl: createAssetData.imageUrl,\n            supply: createAssetData.supply,\n            imagebase64Data: {data: \"\", type: \"\"},\n            symbol: createAssetData.symbol,\n          }\n          sendMessageToChildWindow({requestType: requestType, transactionType: createAssetData.transactionType, formValues, assetType: createAssetData.assetType, properties: createAssetData.properties, chainId: networkInformation.chainId, supply: createAssetData.supply, receiverAddress: createAssetData.receiverAddress, assetId: createAssetData.assetId })\n        } else if (requestType === \"transfer-asset\") {\n          sendMessageToChildWindow({requestType: requestType, chainId: networkInformation.chainId, supply: transferAssetData.supply, receiverAddress: transferAssetData.receiverAddress, assetId: transferAssetData.assetId })\n        }\n      }\n    } else if (event.data.type === \"networkinfo-response\") {\n      childWindow.close()\n      if (event.data.status) {\n        setNetworkInformation(event.data.result)\n      }\n    } \n    else if (event.data.type === \"send-response\" || event.data.type === \"create-asset-response\" || event.data.type === \"disconnect-response\") {\n      childWindow.close()\n      if (transactionData.onComplete) {\n        transactionData.onComplete(event.data)\n      } else if (createAssetData.onComplete) {\n        createAssetData.onComplete(event.data)\n      }\n    }\n  }\n  const sendMessageToChildWindow = (data: any) => {\n    childWindow.postMessage(data, \"*\");\n  }\n  const setNetworkInformation = (params: any) => {\n    networkInformation.chainId = params.chainId;\n    networkInformation.networkType = params.networkType;\n    walletInformation.accountPublicKey = params.accountPublicKey;\n    walletInformation.connectionState = params.connectionState;\n  }\n  const connect = async (params: connectParams) => {\n    return new Promise((resolve, reject) => {\n      const url = `${props.walletUrl}?requestType=connect`;\n      let childWindow = window.open(url,\"_blank\",windowFeatures);\n      setRequestType(\"connect\")\n      setChildWindow(childWindow)\n      console.log(\"datares4\", params)\n      setRequestData({\n        chainId: params.chainId,\n        onComplete: params.onComplete,\n      })\n      console.log(\"datares1\", params)\n      // walletEvent.on(\"connectionresponse\", async (data) =>{\n      //   console.log(\"datares\", data)\n      //   let response = await data;\n      //   console.log(\"datares111\", response)\n      //   resolve(response)\n      // })\n      waitFor('connectionresponse', walletEvent, async (data) =>{\n          console.log(\"datares\", data)\n          let response = await data;\n          console.log(\"datares111\", response)\n          resolve(response)\n        \n      });\n    })  \n  }\n\n  const disconnect = () => {\n    const url = `${props.walletUrl}?requestType=disconnect`;\n    let childWindow = window.open(url,\"_blank\",windowFeatures);\n    setRequestType(\"disconnect\")\n    setChildWindow(childWindow)\n  }\n  const getNetworkInformation = () => {\n    return networkInformation;\n  }\n  const getWalletInformation = () => {\n    return walletInformation;\n  }\n  const send = (params: createTransactionParams) => {\n    if (checkWalletConnection(params.onComplete, \"\")) {\n      const validateTransactionTypeResult = validateSendTransactionType(params.transactionType)\n      if (!validateTransactionTypeResult) {\n        params.onComplete({\n          status: false,\n          error: \"can't process your request, Invalid transaction type\",\n          result: null,\n        })\n        return;\n      }\n      const url = `${props.walletUrl}?requestType=send`;\n      let childWindow = window.open(url,\"_blank\",windowFeatures);\n      setRequestType(\"send\")\n      setChildWindow(childWindow)\n      setTransactionData(params)\n    }\n  }\n  const checkWalletConnection = (onError: any, transactionType: string) => {\n    let status: boolean = true;\n    let error: any = null;\n    if (networkInformation.chainId === null || networkInformation.networkType === \"\") {\n      status = false\n      error = \"The wallet is not connected.\"\n    } else if (transactionType && networkInformation.networkType === \"bitcoin\") {\n      status = false\n      error = \"can't process your request, Invalid transaction type.\"\n    }\n    if (!status) {\n      onError({\n        status: status,\n        result: null,\n        error,\n      })\n    }\n    return status\n  }\n  const validateSendTransactionType = (transactionType: string) => {\n    let status: boolean = false\n    if (transactionType === \"normal\") {\n      status = true\n    } else if (transactionType === \"pegin\") {\n      status = networkInformation.networkType === \"bitcoin\"\n    } else if (transactionType === \"pegout\") {\n      status = networkInformation.networkType === \"sidechain\"\n    }\n    return status\n  }\n  const createasset = (params: CreateassetParams) => {\n    if (checkWalletConnection(params.onComplete, params.transactionType)) {\n      const url = `${props.walletUrl}?requestType=create-asset`;\n      let childWindow = window.open(url,\"_blank\",windowFeatures);\n      setRequestType(\"create-asset\")\n      setChildWindow(childWindow)\n      setCreateAssetData(params)\n    }\n  }\n  const transferasset = (params: TransferAssetParams) => {\n    if (checkWalletConnection(params.onComplete, \"transfer\")) {\n      const url = `${props.walletUrl}?requestType=transfer-asset`;\n      let childWindow = window.open(url,\"_blank\",windowFeatures);\n      setRequestType(\"transfer-asset\")\n      setChildWindow(childWindow)\n      setTransferAssetData(params)\n    }\n  }\n\n  return {connect, getNetworkInformation, send, createasset, transferasset, disconnect, getWalletInformation}\n}"]}

